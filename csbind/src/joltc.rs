/* automatically generated by rust-bindgen 0.69.5 */

pub const JOLT_C_H_: u32 = 1;
pub const __bool_true_false_are_defined: u32 = 1;
pub const false_: u32 = 0;
pub const true_: u32 = 1;
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _CRT_HAS_C11: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const JPH_DEFAULT_CONVEX_RADIUS: f64 = 0.05;
pub const JPH_CAPSULE_PROJECTION_SLOP: f64 = 0.02;
pub const JPH_MAX_PHYSICS_JOBS: u32 = 2048;
pub const JPH_MAX_PHYSICS_BARRIERS: u32 = 2048;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize) -> !;
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub type __crt_bool = bool;
extern "C" {
    pub fn _invalid_parameter_noinfo();
}
extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn() -> !;
}
extern "C" {
    pub fn _invoke_watson(
        _Expression: *const wchar_t,
        _FunctionName: *const wchar_t,
        _FileName: *const wchar_t,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    ) -> !;
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___crt_locale_data_public() {
    const UNINIT: ::std::mem::MaybeUninit<__crt_locale_data_public> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_data_public>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_data_public>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._locale_pctype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_pctype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._locale_mb_cur_max) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_mb_cur_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._locale_lc_codepage) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_lc_codepage)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[test]
fn bindgen_test_layout___crt_locale_pointers() {
    const UNINIT: ::std::mem::MaybeUninit<__crt_locale_pointers> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_pointers>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_pointers>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).locinfo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(locinfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mbcinfo) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(mbcinfo)
        )
    );
}
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__Mbstatet() {
    const UNINIT: ::std::mem::MaybeUninit<_Mbstatet> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_Mbstatet>(),
        8usize,
        concat!("Size of: ", stringify!(_Mbstatet))
    );
    assert_eq!(
        ::std::mem::align_of::<_Mbstatet>(),
        4usize,
        concat!("Alignment of ", stringify!(_Mbstatet))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Wchar) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Wchar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Byte) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Byte)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._State) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_State)
        )
    );
}
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = usize;
extern "C" {
    pub fn _errno() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_errno(_Value: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_errno(_Value: *mut ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn __threadid() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __threadhandle() -> usize;
}
pub type JPH_BodyID = u32;
pub type JPH_SubShapeID = u32;
pub type JPH_ObjectLayer = u16;
pub type JPH_BroadPhaseLayer = u8;
pub const JPH_PhysicsUpdateError_JPH_PhysicsUpdateError_None: JPH_PhysicsUpdateError = 0;
pub const JPH_PhysicsUpdateError_JPH_PhysicsUpdateError_ManifoldCacheFull: JPH_PhysicsUpdateError =
    1;
pub const JPH_PhysicsUpdateError_JPH_PhysicsUpdateError_BodyPairCacheFull: JPH_PhysicsUpdateError =
    2;
pub const JPH_PhysicsUpdateError_JPH_PhysicsUpdateError_ContactConstraintsFull:
    JPH_PhysicsUpdateError = 4;
pub const JPH_PhysicsUpdateError__JPH_PhysicsUpdateError_Count: JPH_PhysicsUpdateError = 5;
pub const JPH_PhysicsUpdateError__JPH_PhysicsUpdateError_Force32: JPH_PhysicsUpdateError =
    2147483647;
pub type JPH_PhysicsUpdateError = ::std::os::raw::c_int;
pub const JPH_BodyType_JPH_BodyType_Rigid: JPH_BodyType = 0;
pub const JPH_BodyType_JPH_BodyType_Soft: JPH_BodyType = 1;
pub const JPH_BodyType__JPH_BodyType_Count: JPH_BodyType = 2;
pub const JPH_BodyType__JPH_BodyType_Force32: JPH_BodyType = 2147483647;
pub type JPH_BodyType = ::std::os::raw::c_int;
pub const JPH_MotionType_JPH_MotionType_Static: JPH_MotionType = 0;
pub const JPH_MotionType_JPH_MotionType_Kinematic: JPH_MotionType = 1;
pub const JPH_MotionType_JPH_MotionType_Dynamic: JPH_MotionType = 2;
pub const JPH_MotionType__JPH_MotionType_Count: JPH_MotionType = 3;
pub const JPH_MotionType__JPH_MotionType_Force32: JPH_MotionType = 2147483647;
pub type JPH_MotionType = ::std::os::raw::c_int;
pub const JPH_Activation_JPH_Activation_Activate: JPH_Activation = 0;
pub const JPH_Activation_JPH_Activation_DontActivate: JPH_Activation = 1;
pub const JPH_Activation__JPH_Activation_Count: JPH_Activation = 2;
pub const JPH_Activation__JPH_Activation_Force32: JPH_Activation = 2147483647;
pub type JPH_Activation = ::std::os::raw::c_int;
pub const JPH_ValidateResult_JPH_ValidateResult_AcceptAllContactsForThisBodyPair:
    JPH_ValidateResult = 0;
pub const JPH_ValidateResult_JPH_ValidateResult_AcceptContact: JPH_ValidateResult = 1;
pub const JPH_ValidateResult_JPH_ValidateResult_RejectContact: JPH_ValidateResult = 2;
pub const JPH_ValidateResult_JPH_ValidateResult_RejectAllContactsForThisBodyPair:
    JPH_ValidateResult = 3;
pub const JPH_ValidateResult__JPH_ValidateResult_Count: JPH_ValidateResult = 4;
pub const JPH_ValidateResult__JPH_ValidateResult_Force32: JPH_ValidateResult = 2147483647;
pub type JPH_ValidateResult = ::std::os::raw::c_int;
pub const JPH_ShapeType_JPH_ShapeType_Convex: JPH_ShapeType = 0;
pub const JPH_ShapeType_JPH_ShapeType_Compound: JPH_ShapeType = 1;
pub const JPH_ShapeType_JPH_ShapeType_Decorated: JPH_ShapeType = 2;
pub const JPH_ShapeType_JPH_ShapeType_Mesh: JPH_ShapeType = 3;
pub const JPH_ShapeType_JPH_ShapeType_HeightField: JPH_ShapeType = 4;
pub const JPH_ShapeType_JPH_ShapeType_SoftBody: JPH_ShapeType = 5;
pub const JPH_ShapeType_JPH_ShapeType_User1: JPH_ShapeType = 6;
pub const JPH_ShapeType_JPH_ShapeType_User2: JPH_ShapeType = 7;
pub const JPH_ShapeType_JPH_ShapeType_User3: JPH_ShapeType = 8;
pub const JPH_ShapeType_JPH_ShapeType_User4: JPH_ShapeType = 9;
pub const JPH_ShapeType__JPH_ShapeType_Count: JPH_ShapeType = 10;
pub const JPH_ShapeType__JPH_ShapeType_Force32: JPH_ShapeType = 2147483647;
pub type JPH_ShapeType = ::std::os::raw::c_int;
pub const JPH_ShapeSubType_JPH_ShapeSubType_Sphere: JPH_ShapeSubType = 0;
pub const JPH_ShapeSubType_JPH_ShapeSubType_Box: JPH_ShapeSubType = 1;
pub const JPH_ShapeSubType_JPH_ShapeSubType_Triangle: JPH_ShapeSubType = 2;
pub const JPH_ShapeSubType_JPH_ShapeSubType_Capsule: JPH_ShapeSubType = 3;
pub const JPH_ShapeSubType_JPH_ShapeSubType_TaperedCapsule: JPH_ShapeSubType = 4;
pub const JPH_ShapeSubType_JPH_ShapeSubType_Cylinder: JPH_ShapeSubType = 5;
pub const JPH_ShapeSubType_JPH_ShapeSubType_ConvexHull: JPH_ShapeSubType = 6;
pub const JPH_ShapeSubType_JPH_ShapeSubType_StaticCompound: JPH_ShapeSubType = 7;
pub const JPH_ShapeSubType_JPH_ShapeSubType_MutableCompound: JPH_ShapeSubType = 8;
pub const JPH_ShapeSubType_JPH_ShapeSubType_RotatedTranslated: JPH_ShapeSubType = 9;
pub const JPH_ShapeSubType_JPH_ShapeSubType_Scaled: JPH_ShapeSubType = 10;
pub const JPH_ShapeSubType_JPH_ShapeSubType_OffsetCenterOfMass: JPH_ShapeSubType = 11;
pub const JPH_ShapeSubType_JPH_ShapeSubType_Mesh: JPH_ShapeSubType = 12;
pub const JPH_ShapeSubType_JPH_ShapeSubType_HeightField: JPH_ShapeSubType = 13;
pub const JPH_ShapeSubType_JPH_ShapeSubType_SoftBody: JPH_ShapeSubType = 14;
pub const JPH_ShapeSubType__JPH_ShapeSubType_Count: JPH_ShapeSubType = 15;
pub const JPH_ShapeSubType__JPH_ShapeSubType_Force32: JPH_ShapeSubType = 2147483647;
pub type JPH_ShapeSubType = ::std::os::raw::c_int;
pub const JPH_ConstraintType_JPH_ConstraintType_Constraint: JPH_ConstraintType = 0;
pub const JPH_ConstraintType_JPH_ConstraintType_TwoBodyConstraint: JPH_ConstraintType = 1;
pub const JPH_ConstraintType__JPH_ConstraintType_Count: JPH_ConstraintType = 2;
pub const JPH_ConstraintType__JPH_ConstraintType_Force32: JPH_ConstraintType = 2147483647;
pub type JPH_ConstraintType = ::std::os::raw::c_int;
pub const JPH_ConstraintSubType_JPH_ConstraintSubType_Fixed: JPH_ConstraintSubType = 0;
pub const JPH_ConstraintSubType_JPH_ConstraintSubType_Point: JPH_ConstraintSubType = 1;
pub const JPH_ConstraintSubType_JPH_ConstraintSubType_Hinge: JPH_ConstraintSubType = 2;
pub const JPH_ConstraintSubType_JPH_ConstraintSubType_Slider: JPH_ConstraintSubType = 3;
pub const JPH_ConstraintSubType_JPH_ConstraintSubType_Distance: JPH_ConstraintSubType = 4;
pub const JPH_ConstraintSubType_JPH_ConstraintSubType_Cone: JPH_ConstraintSubType = 5;
pub const JPH_ConstraintSubType_JPH_ConstraintSubType_SwingTwist: JPH_ConstraintSubType = 6;
pub const JPH_ConstraintSubType_JPH_ConstraintSubType_SixDOF: JPH_ConstraintSubType = 7;
pub const JPH_ConstraintSubType_JPH_ConstraintSubType_Path: JPH_ConstraintSubType = 8;
pub const JPH_ConstraintSubType_JPH_ConstraintSubType_Vehicle: JPH_ConstraintSubType = 9;
pub const JPH_ConstraintSubType_JPH_ConstraintSubType_RackAndPinion: JPH_ConstraintSubType = 10;
pub const JPH_ConstraintSubType_JPH_ConstraintSubType_Gear: JPH_ConstraintSubType = 11;
pub const JPH_ConstraintSubType_JPH_ConstraintSubType_Pulley: JPH_ConstraintSubType = 12;
pub const JPH_ConstraintSubType_JPH_ConstraintSubType_User1: JPH_ConstraintSubType = 13;
pub const JPH_ConstraintSubType_JPH_ConstraintSubType_User2: JPH_ConstraintSubType = 14;
pub const JPH_ConstraintSubType_JPH_ConstraintSubType_User3: JPH_ConstraintSubType = 15;
pub const JPH_ConstraintSubType_JPH_ConstraintSubType_User4: JPH_ConstraintSubType = 16;
pub const JPH_ConstraintSubType__JPH_ConstraintSubType_Count: JPH_ConstraintSubType = 17;
pub const JPH_ConstraintSubType__JPH_ConstraintSubType_Force32: JPH_ConstraintSubType = 2147483647;
pub type JPH_ConstraintSubType = ::std::os::raw::c_int;
pub const JPH_ConstraintSpace_JPH_ConstraintSpace_LocalToBodyCOM: JPH_ConstraintSpace = 0;
pub const JPH_ConstraintSpace_JPH_ConstraintSpace_WorldSpace: JPH_ConstraintSpace = 1;
pub const JPH_ConstraintSpace__JPH_ConstraintSpace_Count: JPH_ConstraintSpace = 2;
pub const JPH_ConstraintSpace__JPH_ConstraintSpace_Force32: JPH_ConstraintSpace = 2147483647;
pub type JPH_ConstraintSpace = ::std::os::raw::c_int;
pub const JPH_MotionQuality_JPH_MotionQuality_Discrete: JPH_MotionQuality = 0;
pub const JPH_MotionQuality_JPH_MotionQuality_LinearCast: JPH_MotionQuality = 1;
pub const JPH_MotionQuality__JPH_MotionQuality_Count: JPH_MotionQuality = 2;
pub const JPH_MotionQuality__JPH_MotionQuality_Force32: JPH_MotionQuality = 2147483647;
pub type JPH_MotionQuality = ::std::os::raw::c_int;
pub const JPH_AllowedDOFs_JPH_AllowedDOFs_All: JPH_AllowedDOFs = 63;
pub const JPH_AllowedDOFs_JPH_AllowedDOFs_TranslationX: JPH_AllowedDOFs = 1;
pub const JPH_AllowedDOFs_JPH_AllowedDOFs_TranslationY: JPH_AllowedDOFs = 2;
pub const JPH_AllowedDOFs_JPH_AllowedDOFs_TranslationZ: JPH_AllowedDOFs = 4;
pub const JPH_AllowedDOFs_JPH_AllowedDOFs_RotationX: JPH_AllowedDOFs = 8;
pub const JPH_AllowedDOFs_JPH_AllowedDOFs_RotationY: JPH_AllowedDOFs = 16;
pub const JPH_AllowedDOFs_JPH_AllowedDOFs_RotationZ: JPH_AllowedDOFs = 32;
pub const JPH_AllowedDOFs_JPH_AllowedDOFs_Plane2D: JPH_AllowedDOFs = 35;
pub const JPH_AllowedDOFs__JPH_AllowedDOFs_Count: JPH_AllowedDOFs = 36;
pub const JPH_AllowedDOFs__JPH_AllowedDOFs_Force32: JPH_AllowedDOFs = 2147483647;
pub type JPH_AllowedDOFs = ::std::os::raw::c_int;
pub const JPH_GroundState_JPH_GroundState_OnGround: JPH_GroundState = 0;
pub const JPH_GroundState_JPH_GroundState_OnSteepGround: JPH_GroundState = 1;
pub const JPH_GroundState_JPH_GroundState_NotSupported: JPH_GroundState = 2;
pub const JPH_GroundState_JPH_GroundState_InAir: JPH_GroundState = 3;
pub const JPH_GroundState__JPH_GroundState_Count: JPH_GroundState = 4;
pub const JPH_GroundState__JPH_GroundState_Force32: JPH_GroundState = 2147483647;
pub type JPH_GroundState = ::std::os::raw::c_int;
pub const JPH_BackFaceMode_JPH_BackFaceMode_IgnoreBackFaces: JPH_BackFaceMode = 0;
pub const JPH_BackFaceMode_JPH_BackFaceMode_CollideWithBackFaces: JPH_BackFaceMode = 1;
pub const JPH_BackFaceMode__JPH_BackFaceMode_Count: JPH_BackFaceMode = 2;
pub const JPH_BackFaceMode__JPH_BackFaceMode_Force32: JPH_BackFaceMode = 2147483647;
pub type JPH_BackFaceMode = ::std::os::raw::c_int;
pub const JPH_ActiveEdgeMode_JPH_ActiveEdgeMode_CollideOnlyWithActive: JPH_ActiveEdgeMode = 0;
pub const JPH_ActiveEdgeMode_JPH_ActiveEdgeMode_CollideWithAll: JPH_ActiveEdgeMode = 1;
pub const JPH_ActiveEdgeMode__JPH_ActiveEdgeMode_Count: JPH_ActiveEdgeMode = 2;
pub const JPH_ActiveEdgeMode__JPH_ActiveEdgeMode_Force32: JPH_ActiveEdgeMode = 2147483647;
pub type JPH_ActiveEdgeMode = ::std::os::raw::c_int;
pub const JPH_CollectFacesMode_JPH_CollectFacesMode_CollectFaces: JPH_CollectFacesMode = 0;
pub const JPH_CollectFacesMode_JPH_CollectFacesMode_NoFaces: JPH_CollectFacesMode = 1;
pub const JPH_CollectFacesMode__JPH_CollectFacesMode_Count: JPH_CollectFacesMode = 2;
pub const JPH_CollectFacesMode__JPH_CollectFacesMode_Force32: JPH_CollectFacesMode = 2147483647;
pub type JPH_CollectFacesMode = ::std::os::raw::c_int;
pub const JPH_MotorState_JPH_MotorState_Off: JPH_MotorState = 0;
pub const JPH_MotorState_JPH_MotorState_Velocity: JPH_MotorState = 1;
pub const JPH_MotorState_JPH_MotorState_Position: JPH_MotorState = 2;
pub const JPH_MotorState__JPH_MotorState_Count: JPH_MotorState = 3;
pub const JPH_MotorState__JPH_MotorState_Force32: JPH_MotorState = 2147483647;
pub type JPH_MotorState = ::std::os::raw::c_int;
pub const JPH_CollisionCollectorType_JPH_CollisionCollectorType_AllHit: JPH_CollisionCollectorType =
    0;
pub const JPH_CollisionCollectorType_JPH_CollisionCollectorType_AllHitSorted:
    JPH_CollisionCollectorType = 1;
pub const JPH_CollisionCollectorType_JPH_CollisionCollectorType_ClosestHit:
    JPH_CollisionCollectorType = 2;
pub const JPH_CollisionCollectorType_JPH_CollisionCollectorType_AnyHit: JPH_CollisionCollectorType =
    3;
pub const JPH_CollisionCollectorType__JPH_CollisionCollectorType_Count: JPH_CollisionCollectorType =
    4;
pub const JPH_CollisionCollectorType__JPH_CollisionCollectorType_Force32:
    JPH_CollisionCollectorType = 2147483647;
pub type JPH_CollisionCollectorType = ::std::os::raw::c_int;
pub const JPH_SixDOFConstraintAxis_JPH_SixDOFConstraintAxis_TranslationX: JPH_SixDOFConstraintAxis =
    0;
pub const JPH_SixDOFConstraintAxis_JPH_SixDOFConstraintAxis_TranslationY: JPH_SixDOFConstraintAxis =
    1;
pub const JPH_SixDOFConstraintAxis_JPH_SixDOFConstraintAxis_TranslationZ: JPH_SixDOFConstraintAxis =
    2;
pub const JPH_SixDOFConstraintAxis_JPH_SixDOFConstraintAxis_RotationX: JPH_SixDOFConstraintAxis = 3;
pub const JPH_SixDOFConstraintAxis_JPH_SixDOFConstraintAxis_RotationY: JPH_SixDOFConstraintAxis = 4;
pub const JPH_SixDOFConstraintAxis_JPH_SixDOFConstraintAxis_RotationZ: JPH_SixDOFConstraintAxis = 5;
pub const JPH_SixDOFConstraintAxis__JPH_SixDOFConstraintAxis_Count: JPH_SixDOFConstraintAxis = 6;
pub const JPH_SixDOFConstraintAxis__JPH_SixDOFConstraintAxis_Force32: JPH_SixDOFConstraintAxis =
    2147483647;
pub type JPH_SixDOFConstraintAxis = ::std::os::raw::c_int;
pub const JPH_SpringMode_JPH_SpringMode_FrequencyAndDamping: JPH_SpringMode = 0;
pub const JPH_SpringMode_JPH_SpringMode_StiffnessAndDamping: JPH_SpringMode = 1;
pub const JPH_SpringMode__JPH_SpringMode_Count: JPH_SpringMode = 2;
pub const JPH_SpringMode__JPH_SpringMode_Force32: JPH_SpringMode = 2147483647;
pub type JPH_SpringMode = ::std::os::raw::c_int;
pub const JPH_SoftBodyConstraintColor_JPH_SoftBodyConstraintColor_ConstraintType:
    JPH_SoftBodyConstraintColor = 0;
#[doc = " Draw different types of constraints in different colors"]
pub const JPH_SoftBodyConstraintColor_JPH_SoftBodyConstraintColor_ConstraintGroup:
    JPH_SoftBodyConstraintColor = 1;
#[doc = " Draw constraints in the same group in the same color, non-parallel group will be red"]
pub const JPH_SoftBodyConstraintColor_JPH_SoftBodyConstraintColor_ConstraintOrder:
    JPH_SoftBodyConstraintColor = 2;
#[doc = " Draw constraints in the same group in the same color, non-parallel group will be red, and order within each group will be indicated with gradient"]
pub const JPH_SoftBodyConstraintColor__JPH_SoftBodyConstraintColor_Count:
    JPH_SoftBodyConstraintColor = 3;
#[doc = " Draw constraints in the same group in the same color, non-parallel group will be red, and order within each group will be indicated with gradient"]
pub const JPH_SoftBodyConstraintColor__JPH_SoftBodyConstraintColor_Force32:
    JPH_SoftBodyConstraintColor = 2147483647;
#[doc = " Defines how to color soft body constraints"]
pub type JPH_SoftBodyConstraintColor = ::std::os::raw::c_int;
#[doc = "< Random color per instance"]
pub const JPH_BodyManager_ShapeColor_JPH_BodyManager_ShapeColor_InstanceColor:
    JPH_BodyManager_ShapeColor = 0;
#[doc = "< Convex = green, scaled = yellow, compound = orange, mesh = red"]
pub const JPH_BodyManager_ShapeColor_JPH_BodyManager_ShapeColor_ShapeTypeColor:
    JPH_BodyManager_ShapeColor = 1;
#[doc = "< Static = grey, keyframed = green, dynamic = random color per instance"]
pub const JPH_BodyManager_ShapeColor_JPH_BodyManager_ShapeColor_MotionTypeColor:
    JPH_BodyManager_ShapeColor = 2;
#[doc = "< Static = grey, keyframed = green, dynamic = yellow, sleeping = red"]
pub const JPH_BodyManager_ShapeColor_JPH_BodyManager_ShapeColor_SleepColor:
    JPH_BodyManager_ShapeColor = 3;
#[doc = "< Static = grey, active = random color per island, sleeping = light grey"]
pub const JPH_BodyManager_ShapeColor_JPH_BodyManager_ShapeColor_IslandColor:
    JPH_BodyManager_ShapeColor = 4;
#[doc = "< Color as defined by the PhysicsMaterial of the shape"]
pub const JPH_BodyManager_ShapeColor_JPH_BodyManager_ShapeColor_MaterialColor:
    JPH_BodyManager_ShapeColor = 5;
pub const JPH_BodyManager_ShapeColor__JPH_BodyManager_ShapeColor_Count: JPH_BodyManager_ShapeColor =
    6;
pub const JPH_BodyManager_ShapeColor__JPH_BodyManager_ShapeColor_Force32:
    JPH_BodyManager_ShapeColor = 2147483647;
pub type JPH_BodyManager_ShapeColor = ::std::os::raw::c_int;
#[doc = "< This shape should cast a shadow"]
pub const JPH_DebugRenderer_CastShadow_JPH_DebugRenderer_CastShadow_On:
    JPH_DebugRenderer_CastShadow = 0;
#[doc = "< This shape should not cast a shadow"]
pub const JPH_DebugRenderer_CastShadow_JPH_DebugRenderer_CastShadow_Off:
    JPH_DebugRenderer_CastShadow = 1;
pub const JPH_DebugRenderer_CastShadow__JPH_DebugRenderer_CastShadow_Count:
    JPH_DebugRenderer_CastShadow = 2;
pub const JPH_DebugRenderer_CastShadow__JPH_DebugRenderer_CastShadow_Force32:
    JPH_DebugRenderer_CastShadow = 2147483647;
pub type JPH_DebugRenderer_CastShadow = ::std::os::raw::c_int;
#[doc = "< Draw as a solid shape"]
pub const JPH_DebugRenderer_DrawMode_JPH_DebugRenderer_DrawMode_Solid: JPH_DebugRenderer_DrawMode =
    0;
#[doc = "< Draw as wireframe"]
pub const JPH_DebugRenderer_DrawMode_JPH_DebugRenderer_DrawMode_Wireframe:
    JPH_DebugRenderer_DrawMode = 1;
pub const JPH_DebugRenderer_DrawMode__JPH_DebugRenderer_JPH_DebugRenderer_DrawMode_Count:
    JPH_DebugRenderer_DrawMode = 2;
pub const JPH_DebugRenderer_DrawMode__JPH_DebugRenderer_JPH_DebugRenderer_DrawMode_Force32:
    JPH_DebugRenderer_DrawMode = 2147483647;
pub type JPH_DebugRenderer_DrawMode = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_Vec3 {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
#[test]
fn bindgen_test_layout_JPH_Vec3() {
    const UNINIT: ::std::mem::MaybeUninit<JPH_Vec3> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JPH_Vec3>(),
        12usize,
        concat!("Size of: ", stringify!(JPH_Vec3))
    );
    assert_eq!(
        ::std::mem::align_of::<JPH_Vec3>(),
        4usize,
        concat!("Alignment of ", stringify!(JPH_Vec3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_Vec3),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_Vec3),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_Vec3),
            "::",
            stringify!(z)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_Vec4 {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub w: f32,
}
#[test]
fn bindgen_test_layout_JPH_Vec4() {
    const UNINIT: ::std::mem::MaybeUninit<JPH_Vec4> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JPH_Vec4>(),
        16usize,
        concat!("Size of: ", stringify!(JPH_Vec4))
    );
    assert_eq!(
        ::std::mem::align_of::<JPH_Vec4>(),
        4usize,
        concat!("Alignment of ", stringify!(JPH_Vec4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_Vec4),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_Vec4),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_Vec4),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_Vec4),
            "::",
            stringify!(w)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_Quat {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub w: f32,
}
#[test]
fn bindgen_test_layout_JPH_Quat() {
    const UNINIT: ::std::mem::MaybeUninit<JPH_Quat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JPH_Quat>(),
        16usize,
        concat!("Size of: ", stringify!(JPH_Quat))
    );
    assert_eq!(
        ::std::mem::align_of::<JPH_Quat>(),
        4usize,
        concat!("Alignment of ", stringify!(JPH_Quat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_Quat),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_Quat),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_Quat),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_Quat),
            "::",
            stringify!(w)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_Plane {
    pub normal: JPH_Vec3,
    pub distance: f32,
}
#[test]
fn bindgen_test_layout_JPH_Plane() {
    const UNINIT: ::std::mem::MaybeUninit<JPH_Plane> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JPH_Plane>(),
        16usize,
        concat!("Size of: ", stringify!(JPH_Plane))
    );
    assert_eq!(
        ::std::mem::align_of::<JPH_Plane>(),
        4usize,
        concat!("Alignment of ", stringify!(JPH_Plane))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).normal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_Plane),
            "::",
            stringify!(normal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).distance) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_Plane),
            "::",
            stringify!(distance)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_Matrix4x4 {
    pub m11: f32,
    pub m12: f32,
    pub m13: f32,
    pub m14: f32,
    pub m21: f32,
    pub m22: f32,
    pub m23: f32,
    pub m24: f32,
    pub m31: f32,
    pub m32: f32,
    pub m33: f32,
    pub m34: f32,
    pub m41: f32,
    pub m42: f32,
    pub m43: f32,
    pub m44: f32,
}
#[test]
fn bindgen_test_layout_JPH_Matrix4x4() {
    const UNINIT: ::std::mem::MaybeUninit<JPH_Matrix4x4> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JPH_Matrix4x4>(),
        64usize,
        concat!("Size of: ", stringify!(JPH_Matrix4x4))
    );
    assert_eq!(
        ::std::mem::align_of::<JPH_Matrix4x4>(),
        4usize,
        concat!("Alignment of ", stringify!(JPH_Matrix4x4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m11) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_Matrix4x4),
            "::",
            stringify!(m11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m12) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_Matrix4x4),
            "::",
            stringify!(m12)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m13) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_Matrix4x4),
            "::",
            stringify!(m13)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m14) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_Matrix4x4),
            "::",
            stringify!(m14)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m21) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_Matrix4x4),
            "::",
            stringify!(m21)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m22) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_Matrix4x4),
            "::",
            stringify!(m22)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m23) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_Matrix4x4),
            "::",
            stringify!(m23)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m24) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_Matrix4x4),
            "::",
            stringify!(m24)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m31) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_Matrix4x4),
            "::",
            stringify!(m31)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m32) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_Matrix4x4),
            "::",
            stringify!(m32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m33) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_Matrix4x4),
            "::",
            stringify!(m33)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m34) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_Matrix4x4),
            "::",
            stringify!(m34)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m41) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_Matrix4x4),
            "::",
            stringify!(m41)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m42) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_Matrix4x4),
            "::",
            stringify!(m42)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m43) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_Matrix4x4),
            "::",
            stringify!(m43)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m44) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_Matrix4x4),
            "::",
            stringify!(m44)
        )
    );
}
pub type JPH_RVec3 = JPH_Vec3;
pub type JPH_RMatrix4x4 = JPH_Matrix4x4;
pub type JPH_Color = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_AABox {
    pub min: JPH_Vec3,
    pub max: JPH_Vec3,
}
#[test]
fn bindgen_test_layout_JPH_AABox() {
    const UNINIT: ::std::mem::MaybeUninit<JPH_AABox> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JPH_AABox>(),
        24usize,
        concat!("Size of: ", stringify!(JPH_AABox))
    );
    assert_eq!(
        ::std::mem::align_of::<JPH_AABox>(),
        4usize,
        concat!("Alignment of ", stringify!(JPH_AABox))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_AABox),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_AABox),
            "::",
            stringify!(max)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_Triangle {
    pub v1: JPH_Vec3,
    pub v2: JPH_Vec3,
    pub v3: JPH_Vec3,
    pub materialIndex: u32,
}
#[test]
fn bindgen_test_layout_JPH_Triangle() {
    const UNINIT: ::std::mem::MaybeUninit<JPH_Triangle> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JPH_Triangle>(),
        40usize,
        concat!("Size of: ", stringify!(JPH_Triangle))
    );
    assert_eq!(
        ::std::mem::align_of::<JPH_Triangle>(),
        4usize,
        concat!("Alignment of ", stringify!(JPH_Triangle))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_Triangle),
            "::",
            stringify!(v1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v2) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_Triangle),
            "::",
            stringify!(v2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v3) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_Triangle),
            "::",
            stringify!(v3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).materialIndex) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_Triangle),
            "::",
            stringify!(materialIndex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_IndexedTriangleNoMaterial {
    pub i1: u32,
    pub i2: u32,
    pub i3: u32,
}
#[test]
fn bindgen_test_layout_JPH_IndexedTriangleNoMaterial() {
    const UNINIT: ::std::mem::MaybeUninit<JPH_IndexedTriangleNoMaterial> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JPH_IndexedTriangleNoMaterial>(),
        12usize,
        concat!("Size of: ", stringify!(JPH_IndexedTriangleNoMaterial))
    );
    assert_eq!(
        ::std::mem::align_of::<JPH_IndexedTriangleNoMaterial>(),
        4usize,
        concat!("Alignment of ", stringify!(JPH_IndexedTriangleNoMaterial))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).i1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_IndexedTriangleNoMaterial),
            "::",
            stringify!(i1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).i2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_IndexedTriangleNoMaterial),
            "::",
            stringify!(i2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).i3) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_IndexedTriangleNoMaterial),
            "::",
            stringify!(i3)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_IndexedTriangle {
    pub i1: u32,
    pub i2: u32,
    pub i3: u32,
    pub materialIndex: u32,
    pub userData: u32,
}
#[test]
fn bindgen_test_layout_JPH_IndexedTriangle() {
    const UNINIT: ::std::mem::MaybeUninit<JPH_IndexedTriangle> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JPH_IndexedTriangle>(),
        20usize,
        concat!("Size of: ", stringify!(JPH_IndexedTriangle))
    );
    assert_eq!(
        ::std::mem::align_of::<JPH_IndexedTriangle>(),
        4usize,
        concat!("Alignment of ", stringify!(JPH_IndexedTriangle))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).i1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_IndexedTriangle),
            "::",
            stringify!(i1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).i2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_IndexedTriangle),
            "::",
            stringify!(i2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).i3) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_IndexedTriangle),
            "::",
            stringify!(i3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).materialIndex) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_IndexedTriangle),
            "::",
            stringify!(materialIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).userData) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_IndexedTriangle),
            "::",
            stringify!(userData)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_MassProperties {
    pub mass: f32,
    pub inertia: JPH_Matrix4x4,
}
#[test]
fn bindgen_test_layout_JPH_MassProperties() {
    const UNINIT: ::std::mem::MaybeUninit<JPH_MassProperties> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JPH_MassProperties>(),
        68usize,
        concat!("Size of: ", stringify!(JPH_MassProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<JPH_MassProperties>(),
        4usize,
        concat!("Alignment of ", stringify!(JPH_MassProperties))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mass) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_MassProperties),
            "::",
            stringify!(mass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inertia) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_MassProperties),
            "::",
            stringify!(inertia)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_CollideSettingsBase {
    #[doc = " How active edges (edges that a moving object should bump into) are handled"]
    pub activeEdgeMode: JPH_ActiveEdgeMode,
    #[doc = " If colliding faces should be collected or only the collision point"]
    pub collectFacesMode: JPH_CollectFacesMode,
    #[doc = " If objects are closer than this distance, they are considered to be colliding (used for GJK) (unit: meter)"]
    pub collisionTolerance: f32,
    #[doc = " A factor that determines the accuracy of the penetration depth calculation. If the change of the squared distance is less than tolerance * current_penetration_depth^2 the algorithm will terminate. (unit: dimensionless)"]
    pub penetrationTolerance: f32,
    #[doc = " When mActiveEdgeMode is CollideOnlyWithActive a movement direction can be provided. When hitting an inactive edge, the system will select the triangle normal as penetration depth only if it impedes the movement less than with the calculated penetration depth."]
    pub activeEdgeMovementDirection: JPH_Vec3,
}
#[test]
fn bindgen_test_layout_JPH_CollideSettingsBase() {
    const UNINIT: ::std::mem::MaybeUninit<JPH_CollideSettingsBase> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JPH_CollideSettingsBase>(),
        28usize,
        concat!("Size of: ", stringify!(JPH_CollideSettingsBase))
    );
    assert_eq!(
        ::std::mem::align_of::<JPH_CollideSettingsBase>(),
        4usize,
        concat!("Alignment of ", stringify!(JPH_CollideSettingsBase))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).activeEdgeMode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_CollideSettingsBase),
            "::",
            stringify!(activeEdgeMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).collectFacesMode) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_CollideSettingsBase),
            "::",
            stringify!(collectFacesMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).collisionTolerance) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_CollideSettingsBase),
            "::",
            stringify!(collisionTolerance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).penetrationTolerance) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_CollideSettingsBase),
            "::",
            stringify!(penetrationTolerance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).activeEdgeMovementDirection) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_CollideSettingsBase),
            "::",
            stringify!(activeEdgeMovementDirection)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_CollideShapeSettings {
    pub base: JPH_CollideSettingsBase,
    #[doc = " When > 0 contacts in the vicinity of the query shape can be found. All nearest contacts that are not further away than this distance will be found (unit: meter)"]
    pub maxSeparationDistance: f32,
    #[doc = " How backfacing triangles should be treated"]
    pub backFaceMode: JPH_BackFaceMode,
}
#[test]
fn bindgen_test_layout_JPH_CollideShapeSettings() {
    const UNINIT: ::std::mem::MaybeUninit<JPH_CollideShapeSettings> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JPH_CollideShapeSettings>(),
        36usize,
        concat!("Size of: ", stringify!(JPH_CollideShapeSettings))
    );
    assert_eq!(
        ::std::mem::align_of::<JPH_CollideShapeSettings>(),
        4usize,
        concat!("Alignment of ", stringify!(JPH_CollideShapeSettings))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_CollideShapeSettings),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxSeparationDistance) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_CollideShapeSettings),
            "::",
            stringify!(maxSeparationDistance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backFaceMode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_CollideShapeSettings),
            "::",
            stringify!(backFaceMode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_ShapeCastSettings {
    pub base: JPH_CollideSettingsBase,
    #[doc = " How backfacing triangles should be treated (should we report moving from back to front for triangle based shapes, e.g. for MeshShape/HeightFieldShape?)"]
    pub backFaceModeTriangles: JPH_BackFaceMode,
    #[doc = " How backfacing convex objects should be treated (should we report starting inside an object and moving out?)"]
    pub backFaceModeConvex: JPH_BackFaceMode,
    #[doc = " Indicates if we want to shrink the shape by the convex radius and then expand it again. This speeds up collision detection and gives a more accurate normal at the cost of a more 'rounded' shape."]
    pub useShrunkenShapeAndConvexRadius: bool,
    #[doc = " When true, and the shape is intersecting at the beginning of the cast (fraction = 0) then this will calculate the deepest penetration point (costing additional CPU time)"]
    pub returnDeepestPoint: bool,
}
#[test]
fn bindgen_test_layout_JPH_ShapeCastSettings() {
    const UNINIT: ::std::mem::MaybeUninit<JPH_ShapeCastSettings> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JPH_ShapeCastSettings>(),
        40usize,
        concat!("Size of: ", stringify!(JPH_ShapeCastSettings))
    );
    assert_eq!(
        ::std::mem::align_of::<JPH_ShapeCastSettings>(),
        4usize,
        concat!("Alignment of ", stringify!(JPH_ShapeCastSettings))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_ShapeCastSettings),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backFaceModeTriangles) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_ShapeCastSettings),
            "::",
            stringify!(backFaceModeTriangles)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backFaceModeConvex) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_ShapeCastSettings),
            "::",
            stringify!(backFaceModeConvex)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).useShrunkenShapeAndConvexRadius) as usize - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_ShapeCastSettings),
            "::",
            stringify!(useShrunkenShapeAndConvexRadius)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).returnDeepestPoint) as usize - ptr as usize },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_ShapeCastSettings),
            "::",
            stringify!(returnDeepestPoint)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_RayCastSettings {
    #[doc = " How backfacing triangles should be treated (should we report back facing hits for triangle based shapes, e.g. MeshShape/HeightFieldShape?)"]
    pub backFaceModeTriangles: JPH_BackFaceMode,
    #[doc = " How backfacing convex objects should be treated (should we report back facing hits for convex shapes?)"]
    pub backFaceModeConvex: JPH_BackFaceMode,
    #[doc = " If convex shapes should be treated as solid. When true, a ray starting inside a convex shape will generate a hit at fraction 0."]
    pub treatConvexAsSolid: bool,
}
#[test]
fn bindgen_test_layout_JPH_RayCastSettings() {
    const UNINIT: ::std::mem::MaybeUninit<JPH_RayCastSettings> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JPH_RayCastSettings>(),
        12usize,
        concat!("Size of: ", stringify!(JPH_RayCastSettings))
    );
    assert_eq!(
        ::std::mem::align_of::<JPH_RayCastSettings>(),
        4usize,
        concat!("Alignment of ", stringify!(JPH_RayCastSettings))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backFaceModeTriangles) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_RayCastSettings),
            "::",
            stringify!(backFaceModeTriangles)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backFaceModeConvex) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_RayCastSettings),
            "::",
            stringify!(backFaceModeConvex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).treatConvexAsSolid) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_RayCastSettings),
            "::",
            stringify!(treatConvexAsSolid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_SpringSettings {
    pub mode: JPH_SpringMode,
    pub frequencyOrStiffness: f32,
    pub damping: f32,
}
#[test]
fn bindgen_test_layout_JPH_SpringSettings() {
    const UNINIT: ::std::mem::MaybeUninit<JPH_SpringSettings> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JPH_SpringSettings>(),
        12usize,
        concat!("Size of: ", stringify!(JPH_SpringSettings))
    );
    assert_eq!(
        ::std::mem::align_of::<JPH_SpringSettings>(),
        4usize,
        concat!("Alignment of ", stringify!(JPH_SpringSettings))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_SpringSettings),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frequencyOrStiffness) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_SpringSettings),
            "::",
            stringify!(frequencyOrStiffness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).damping) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_SpringSettings),
            "::",
            stringify!(damping)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_MotorSettings {
    pub springSettings: JPH_SpringSettings,
    pub minForceLimit: f32,
    pub maxForceLimit: f32,
    pub minTorqueLimit: f32,
    pub maxTorqueLimit: f32,
}
#[test]
fn bindgen_test_layout_JPH_MotorSettings() {
    const UNINIT: ::std::mem::MaybeUninit<JPH_MotorSettings> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JPH_MotorSettings>(),
        28usize,
        concat!("Size of: ", stringify!(JPH_MotorSettings))
    );
    assert_eq!(
        ::std::mem::align_of::<JPH_MotorSettings>(),
        4usize,
        concat!("Alignment of ", stringify!(JPH_MotorSettings))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).springSettings) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_MotorSettings),
            "::",
            stringify!(springSettings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minForceLimit) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_MotorSettings),
            "::",
            stringify!(minForceLimit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxForceLimit) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_MotorSettings),
            "::",
            stringify!(maxForceLimit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minTorqueLimit) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_MotorSettings),
            "::",
            stringify!(minTorqueLimit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxTorqueLimit) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_MotorSettings),
            "::",
            stringify!(maxTorqueLimit)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_SubShapeIDPair {
    pub Body1ID: JPH_BodyID,
    pub subShapeID1: JPH_SubShapeID,
    pub Body2ID: JPH_BodyID,
    pub subShapeID2: JPH_SubShapeID,
}
#[test]
fn bindgen_test_layout_JPH_SubShapeIDPair() {
    const UNINIT: ::std::mem::MaybeUninit<JPH_SubShapeIDPair> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JPH_SubShapeIDPair>(),
        16usize,
        concat!("Size of: ", stringify!(JPH_SubShapeIDPair))
    );
    assert_eq!(
        ::std::mem::align_of::<JPH_SubShapeIDPair>(),
        4usize,
        concat!("Alignment of ", stringify!(JPH_SubShapeIDPair))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Body1ID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_SubShapeIDPair),
            "::",
            stringify!(Body1ID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subShapeID1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_SubShapeIDPair),
            "::",
            stringify!(subShapeID1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Body2ID) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_SubShapeIDPair),
            "::",
            stringify!(Body2ID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subShapeID2) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_SubShapeIDPair),
            "::",
            stringify!(subShapeID2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_BroadPhaseCastResult {
    pub bodyID: JPH_BodyID,
    pub fraction: f32,
}
#[test]
fn bindgen_test_layout_JPH_BroadPhaseCastResult() {
    const UNINIT: ::std::mem::MaybeUninit<JPH_BroadPhaseCastResult> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JPH_BroadPhaseCastResult>(),
        8usize,
        concat!("Size of: ", stringify!(JPH_BroadPhaseCastResult))
    );
    assert_eq!(
        ::std::mem::align_of::<JPH_BroadPhaseCastResult>(),
        4usize,
        concat!("Alignment of ", stringify!(JPH_BroadPhaseCastResult))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bodyID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_BroadPhaseCastResult),
            "::",
            stringify!(bodyID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fraction) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_BroadPhaseCastResult),
            "::",
            stringify!(fraction)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_RayCastResult {
    pub bodyID: JPH_BodyID,
    pub fraction: f32,
    pub subShapeID2: JPH_SubShapeID,
}
#[test]
fn bindgen_test_layout_JPH_RayCastResult() {
    const UNINIT: ::std::mem::MaybeUninit<JPH_RayCastResult> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JPH_RayCastResult>(),
        12usize,
        concat!("Size of: ", stringify!(JPH_RayCastResult))
    );
    assert_eq!(
        ::std::mem::align_of::<JPH_RayCastResult>(),
        4usize,
        concat!("Alignment of ", stringify!(JPH_RayCastResult))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bodyID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_RayCastResult),
            "::",
            stringify!(bodyID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fraction) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_RayCastResult),
            "::",
            stringify!(fraction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subShapeID2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_RayCastResult),
            "::",
            stringify!(subShapeID2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_CollidePointResult {
    pub bodyID: JPH_BodyID,
    pub subShapeID2: JPH_SubShapeID,
}
#[test]
fn bindgen_test_layout_JPH_CollidePointResult() {
    const UNINIT: ::std::mem::MaybeUninit<JPH_CollidePointResult> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JPH_CollidePointResult>(),
        8usize,
        concat!("Size of: ", stringify!(JPH_CollidePointResult))
    );
    assert_eq!(
        ::std::mem::align_of::<JPH_CollidePointResult>(),
        4usize,
        concat!("Alignment of ", stringify!(JPH_CollidePointResult))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bodyID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_CollidePointResult),
            "::",
            stringify!(bodyID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subShapeID2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_CollidePointResult),
            "::",
            stringify!(subShapeID2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_CollideShapeResult {
    pub contactPointOn1: JPH_Vec3,
    pub contactPointOn2: JPH_Vec3,
    pub penetrationAxis: JPH_Vec3,
    pub penetrationDepth: f32,
    pub subShapeID1: JPH_SubShapeID,
    pub subShapeID2: JPH_SubShapeID,
    pub bodyID2: JPH_BodyID,
}
#[test]
fn bindgen_test_layout_JPH_CollideShapeResult() {
    const UNINIT: ::std::mem::MaybeUninit<JPH_CollideShapeResult> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JPH_CollideShapeResult>(),
        52usize,
        concat!("Size of: ", stringify!(JPH_CollideShapeResult))
    );
    assert_eq!(
        ::std::mem::align_of::<JPH_CollideShapeResult>(),
        4usize,
        concat!("Alignment of ", stringify!(JPH_CollideShapeResult))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).contactPointOn1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_CollideShapeResult),
            "::",
            stringify!(contactPointOn1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).contactPointOn2) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_CollideShapeResult),
            "::",
            stringify!(contactPointOn2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).penetrationAxis) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_CollideShapeResult),
            "::",
            stringify!(penetrationAxis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).penetrationDepth) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_CollideShapeResult),
            "::",
            stringify!(penetrationDepth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subShapeID1) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_CollideShapeResult),
            "::",
            stringify!(subShapeID1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subShapeID2) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_CollideShapeResult),
            "::",
            stringify!(subShapeID2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bodyID2) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_CollideShapeResult),
            "::",
            stringify!(bodyID2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_ShapeCastResult {
    pub contactPointOn1: JPH_Vec3,
    pub contactPointOn2: JPH_Vec3,
    pub penetrationAxis: JPH_Vec3,
    pub penetrationDepth: f32,
    pub subShapeID1: JPH_SubShapeID,
    pub subShapeID2: JPH_SubShapeID,
    pub bodyID2: JPH_BodyID,
    pub fraction: f32,
    pub isBackFaceHit: bool,
}
#[test]
fn bindgen_test_layout_JPH_ShapeCastResult() {
    const UNINIT: ::std::mem::MaybeUninit<JPH_ShapeCastResult> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JPH_ShapeCastResult>(),
        60usize,
        concat!("Size of: ", stringify!(JPH_ShapeCastResult))
    );
    assert_eq!(
        ::std::mem::align_of::<JPH_ShapeCastResult>(),
        4usize,
        concat!("Alignment of ", stringify!(JPH_ShapeCastResult))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).contactPointOn1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_ShapeCastResult),
            "::",
            stringify!(contactPointOn1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).contactPointOn2) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_ShapeCastResult),
            "::",
            stringify!(contactPointOn2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).penetrationAxis) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_ShapeCastResult),
            "::",
            stringify!(penetrationAxis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).penetrationDepth) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_ShapeCastResult),
            "::",
            stringify!(penetrationDepth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subShapeID1) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_ShapeCastResult),
            "::",
            stringify!(subShapeID1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subShapeID2) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_ShapeCastResult),
            "::",
            stringify!(subShapeID2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bodyID2) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_ShapeCastResult),
            "::",
            stringify!(bodyID2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fraction) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_ShapeCastResult),
            "::",
            stringify!(fraction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isBackFaceHit) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_ShapeCastResult),
            "::",
            stringify!(isBackFaceHit)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_DrawSettings {
    #[doc = "< Draw the GetSupport() function, used for convex collision detection"]
    pub drawGetSupportFunction: bool,
    #[doc = "< When drawing the support function, also draw which direction mapped to a specific support point"]
    pub drawSupportDirection: bool,
    #[doc = "< Draw the faces that were found colliding during collision detection"]
    pub drawGetSupportingFace: bool,
    #[doc = "< Draw the shapes of all bodies"]
    pub drawShape: bool,
    #[doc = "< When mDrawShape is true and this is true, the shapes will be drawn in wireframe instead of solid."]
    pub drawShapeWireframe: bool,
    #[doc = "< Coloring scheme to use for shapes"]
    pub drawShapeColor: JPH_BodyManager_ShapeColor,
    #[doc = "< Draw a bounding box per body"]
    pub drawBoundingBox: bool,
    #[doc = "< Draw the center of mass for each body"]
    pub drawCenterOfMassTransform: bool,
    #[doc = "< Draw the world transform (which can be different than the center of mass) for each body"]
    pub drawWorldTransform: bool,
    #[doc = "< Draw the velocity vector for each body"]
    pub drawVelocity: bool,
    #[doc = "< Draw the mass and inertia (as the box equivalent) for each body"]
    pub drawMassAndInertia: bool,
    #[doc = "< Draw stats regarding the sleeping algorithm of each body"]
    pub drawSleepStats: bool,
    #[doc = "< Draw the vertices of soft bodies"]
    pub drawSoftBodyVertices: bool,
    #[doc = "< Draw the velocities of the vertices of soft bodies"]
    pub drawSoftBodyVertexVelocities: bool,
    #[doc = "< Draw the edge constraints of soft bodies"]
    pub drawSoftBodyEdgeConstraints: bool,
    #[doc = "< Draw the bend constraints of soft bodies"]
    pub drawSoftBodyBendConstraints: bool,
    #[doc = "< Draw the volume constraints of soft bodies"]
    pub drawSoftBodyVolumeConstraints: bool,
    #[doc = "< Draw the skin constraints of soft bodies"]
    pub drawSoftBodySkinConstraints: bool,
    #[doc = "< Draw the LRA constraints of soft bodies"]
    pub drawSoftBodyLRAConstraints: bool,
    #[doc = "< Draw the predicted bounds of soft bodies"]
    pub drawSoftBodyPredictedBounds: bool,
    #[doc = "< Coloring scheme to use for soft body constraints"]
    pub drawSoftBodyConstraintColor: JPH_SoftBodyConstraintColor,
}
#[test]
fn bindgen_test_layout_JPH_DrawSettings() {
    const UNINIT: ::std::mem::MaybeUninit<JPH_DrawSettings> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JPH_DrawSettings>(),
        32usize,
        concat!("Size of: ", stringify!(JPH_DrawSettings))
    );
    assert_eq!(
        ::std::mem::align_of::<JPH_DrawSettings>(),
        4usize,
        concat!("Alignment of ", stringify!(JPH_DrawSettings))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drawGetSupportFunction) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_DrawSettings),
            "::",
            stringify!(drawGetSupportFunction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drawSupportDirection) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_DrawSettings),
            "::",
            stringify!(drawSupportDirection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drawGetSupportingFace) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_DrawSettings),
            "::",
            stringify!(drawGetSupportingFace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drawShape) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_DrawSettings),
            "::",
            stringify!(drawShape)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drawShapeWireframe) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_DrawSettings),
            "::",
            stringify!(drawShapeWireframe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drawShapeColor) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_DrawSettings),
            "::",
            stringify!(drawShapeColor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drawBoundingBox) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_DrawSettings),
            "::",
            stringify!(drawBoundingBox)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drawCenterOfMassTransform) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_DrawSettings),
            "::",
            stringify!(drawCenterOfMassTransform)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drawWorldTransform) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_DrawSettings),
            "::",
            stringify!(drawWorldTransform)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drawVelocity) as usize - ptr as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_DrawSettings),
            "::",
            stringify!(drawVelocity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drawMassAndInertia) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_DrawSettings),
            "::",
            stringify!(drawMassAndInertia)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drawSleepStats) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_DrawSettings),
            "::",
            stringify!(drawSleepStats)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drawSoftBodyVertices) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_DrawSettings),
            "::",
            stringify!(drawSoftBodyVertices)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).drawSoftBodyVertexVelocities) as usize - ptr as usize
        },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_DrawSettings),
            "::",
            stringify!(drawSoftBodyVertexVelocities)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drawSoftBodyEdgeConstraints) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_DrawSettings),
            "::",
            stringify!(drawSoftBodyEdgeConstraints)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drawSoftBodyBendConstraints) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_DrawSettings),
            "::",
            stringify!(drawSoftBodyBendConstraints)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).drawSoftBodyVolumeConstraints) as usize - ptr as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_DrawSettings),
            "::",
            stringify!(drawSoftBodyVolumeConstraints)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drawSoftBodySkinConstraints) as usize - ptr as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_DrawSettings),
            "::",
            stringify!(drawSoftBodySkinConstraints)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drawSoftBodyLRAConstraints) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_DrawSettings),
            "::",
            stringify!(drawSoftBodyLRAConstraints)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drawSoftBodyPredictedBounds) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_DrawSettings),
            "::",
            stringify!(drawSoftBodyPredictedBounds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drawSoftBodyConstraintColor) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_DrawSettings),
            "::",
            stringify!(drawSoftBodyConstraintColor)
        )
    );
}
pub type JPH_CastRayResultCallback = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ::std::os::raw::c_void, result: *const JPH_RayCastResult),
>;
pub type JPH_RayCastBodyResultCallback = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        result: *const JPH_BroadPhaseCastResult,
    ),
>;
pub type JPH_CollideShapeBodyResultCallback = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ::std::os::raw::c_void, result: JPH_BodyID),
>;
pub type JPH_CollidePointResultCallback = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        result: *const JPH_CollidePointResult,
    ),
>;
pub type JPH_CollideShapeResultCallback = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        result: *const JPH_CollideShapeResult,
    ),
>;
pub type JPH_CastShapeResultCallback = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ::std::os::raw::c_void, result: *const JPH_ShapeCastResult),
>;
pub type JPH_CastRayCollector = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        result: *const JPH_RayCastResult,
    ) -> f32,
>;
pub type JPH_RayCastBodyCollector = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        result: *const JPH_BroadPhaseCastResult,
    ) -> f32,
>;
pub type JPH_CollideShapeBodyCollector = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ::std::os::raw::c_void, result: JPH_BodyID) -> f32,
>;
pub type JPH_CollidePointCollector = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        result: *const JPH_CollidePointResult,
    ) -> f32,
>;
pub type JPH_CollideShapeCollector = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        result: *const JPH_CollideShapeResult,
    ) -> f32,
>;
pub type JPH_CastShapeCollector = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        result: *const JPH_ShapeCastResult,
    ) -> f32,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_BroadPhaseLayerInterface {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_ObjectVsBroadPhaseLayerFilter {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_ObjectLayerPairFilter {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_BroadPhaseLayerFilter {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_ObjectLayerFilter {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_BodyFilter {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_ShapeFilter {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_PhysicsSystem {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_PhysicsMaterial {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_ShapeSettings {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_ConvexShapeSettings {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_SphereShapeSettings {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_BoxShapeSettings {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_PlaneShapeSettings {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_TriangleShapeSettings {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_CapsuleShapeSettings {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_TaperedCapsuleShapeSettings {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_CylinderShapeSettings {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_TaperedCylinderShapeSettings {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_ConvexHullShapeSettings {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_CompoundShapeSettings {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_StaticCompoundShapeSettings {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_MutableCompoundShapeSettings {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_MeshShapeSettings {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_HeightFieldShapeSettings {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_RotatedTranslatedShapeSettings {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_ScaledShapeSettings {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_OffsetCenterOfMassShapeSettings {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_EmptyShapeSettings {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_Shape {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_ConvexShape {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_SphereShape {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_BoxShape {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_PlaneShape {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_CapsuleShape {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_CylinderShape {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_TaperedCylinderShape {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_TriangleShape {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_TaperedCapsuleShape {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_ConvexHullShape {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_CompoundShape {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_StaticCompoundShape {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_MutableCompoundShape {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_MeshShape {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_HeightFieldShape {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_DecoratedShape {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_RotatedTranslatedShape {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_ScaledShape {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_OffsetCenterOfMassShape {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_EmptyShape {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_BodyCreationSettings {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_SoftBodyCreationSettings {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_BodyInterface {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_BodyLockInterface {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_BroadPhaseQuery {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_NarrowPhaseQuery {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_MotionProperties {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_Body {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_ConstraintSettings {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_FixedConstraintSettings {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_TwoBodyConstraintSettings {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_DistanceConstraintSettings {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_HingeConstraintSettings {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_SliderConstraintSettings {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_PointConstraintSettings {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_ConeConstraintSettings {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_SwingTwistConstraintSettings {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_SixDOFConstraintSettings {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_Constraint {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_TwoBodyConstraint {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_FixedConstraint {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_DistanceConstraint {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_PointConstraint {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_HingeConstraint {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_SliderConstraint {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_ConeConstraint {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_SwingTwistConstraint {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_SixDOFConstraint {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_ContactListener {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_ContactManifold {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_ContactSettings {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_BodyActivationListener {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_BodyDrawFilter {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_SharedMutex {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_DebugRenderer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_BodyLockRead {
    pub lockInterface: *const JPH_BodyLockInterface,
    pub mutex: *mut JPH_SharedMutex,
    pub body: *const JPH_Body,
}
#[test]
fn bindgen_test_layout_JPH_BodyLockRead() {
    const UNINIT: ::std::mem::MaybeUninit<JPH_BodyLockRead> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JPH_BodyLockRead>(),
        24usize,
        concat!("Size of: ", stringify!(JPH_BodyLockRead))
    );
    assert_eq!(
        ::std::mem::align_of::<JPH_BodyLockRead>(),
        8usize,
        concat!("Alignment of ", stringify!(JPH_BodyLockRead))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lockInterface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_BodyLockRead),
            "::",
            stringify!(lockInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mutex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_BodyLockRead),
            "::",
            stringify!(mutex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).body) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_BodyLockRead),
            "::",
            stringify!(body)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_BodyLockWrite {
    pub lockInterface: *const JPH_BodyLockInterface,
    pub mutex: *mut JPH_SharedMutex,
    pub body: *mut JPH_Body,
}
#[test]
fn bindgen_test_layout_JPH_BodyLockWrite() {
    const UNINIT: ::std::mem::MaybeUninit<JPH_BodyLockWrite> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JPH_BodyLockWrite>(),
        24usize,
        concat!("Size of: ", stringify!(JPH_BodyLockWrite))
    );
    assert_eq!(
        ::std::mem::align_of::<JPH_BodyLockWrite>(),
        8usize,
        concat!("Alignment of ", stringify!(JPH_BodyLockWrite))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lockInterface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_BodyLockWrite),
            "::",
            stringify!(lockInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mutex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_BodyLockWrite),
            "::",
            stringify!(mutex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).body) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_BodyLockWrite),
            "::",
            stringify!(body)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_ExtendedUpdateSettings {
    pub stickToFloorStepDown: JPH_Vec3,
    pub walkStairsStepUp: JPH_Vec3,
    pub walkStairsMinStepForward: f32,
    pub walkStairsStepForwardTest: f32,
    pub walkStairsCosAngleForwardContact: f32,
    pub walkStairsStepDownExtra: JPH_Vec3,
}
#[test]
fn bindgen_test_layout_JPH_ExtendedUpdateSettings() {
    const UNINIT: ::std::mem::MaybeUninit<JPH_ExtendedUpdateSettings> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JPH_ExtendedUpdateSettings>(),
        48usize,
        concat!("Size of: ", stringify!(JPH_ExtendedUpdateSettings))
    );
    assert_eq!(
        ::std::mem::align_of::<JPH_ExtendedUpdateSettings>(),
        4usize,
        concat!("Alignment of ", stringify!(JPH_ExtendedUpdateSettings))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stickToFloorStepDown) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_ExtendedUpdateSettings),
            "::",
            stringify!(stickToFloorStepDown)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).walkStairsStepUp) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_ExtendedUpdateSettings),
            "::",
            stringify!(walkStairsStepUp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).walkStairsMinStepForward) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_ExtendedUpdateSettings),
            "::",
            stringify!(walkStairsMinStepForward)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).walkStairsStepForwardTest) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_ExtendedUpdateSettings),
            "::",
            stringify!(walkStairsStepForwardTest)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).walkStairsCosAngleForwardContact) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_ExtendedUpdateSettings),
            "::",
            stringify!(walkStairsCosAngleForwardContact)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).walkStairsStepDownExtra) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_ExtendedUpdateSettings),
            "::",
            stringify!(walkStairsStepDownExtra)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_CharacterBaseSettings {
    pub up: JPH_Vec3,
    pub supportingVolume: JPH_Plane,
    pub maxSlopeAngle: f32,
    pub enhancedInternalEdgeRemoval: bool,
    pub shape: *const JPH_Shape,
}
#[test]
fn bindgen_test_layout_JPH_CharacterBaseSettings() {
    const UNINIT: ::std::mem::MaybeUninit<JPH_CharacterBaseSettings> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JPH_CharacterBaseSettings>(),
        48usize,
        concat!("Size of: ", stringify!(JPH_CharacterBaseSettings))
    );
    assert_eq!(
        ::std::mem::align_of::<JPH_CharacterBaseSettings>(),
        8usize,
        concat!("Alignment of ", stringify!(JPH_CharacterBaseSettings))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).up) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_CharacterBaseSettings),
            "::",
            stringify!(up)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportingVolume) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_CharacterBaseSettings),
            "::",
            stringify!(supportingVolume)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxSlopeAngle) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_CharacterBaseSettings),
            "::",
            stringify!(maxSlopeAngle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enhancedInternalEdgeRemoval) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_CharacterBaseSettings),
            "::",
            stringify!(enhancedInternalEdgeRemoval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shape) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_CharacterBaseSettings),
            "::",
            stringify!(shape)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_CharacterBase {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_CharacterSettings {
    pub base: JPH_CharacterBaseSettings,
    pub layer: JPH_ObjectLayer,
    pub mass: f32,
    pub friction: f32,
    pub gravityFactor: f32,
}
#[test]
fn bindgen_test_layout_JPH_CharacterSettings() {
    const UNINIT: ::std::mem::MaybeUninit<JPH_CharacterSettings> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JPH_CharacterSettings>(),
        64usize,
        concat!("Size of: ", stringify!(JPH_CharacterSettings))
    );
    assert_eq!(
        ::std::mem::align_of::<JPH_CharacterSettings>(),
        8usize,
        concat!("Alignment of ", stringify!(JPH_CharacterSettings))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_CharacterSettings),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layer) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_CharacterSettings),
            "::",
            stringify!(layer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mass) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_CharacterSettings),
            "::",
            stringify!(mass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).friction) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_CharacterSettings),
            "::",
            stringify!(friction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gravityFactor) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_CharacterSettings),
            "::",
            stringify!(gravityFactor)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_Character {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_CharacterVirtualSettings {
    pub base: JPH_CharacterBaseSettings,
    pub mass: f32,
    pub maxStrength: f32,
    pub shapeOffset: JPH_Vec3,
    pub backFaceMode: JPH_BackFaceMode,
    pub predictiveContactDistance: f32,
    pub maxCollisionIterations: u32,
    pub maxConstraintIterations: u32,
    pub minTimeRemaining: f32,
    pub collisionTolerance: f32,
    pub characterPadding: f32,
    pub maxNumHits: u32,
    pub hitReductionCosMaxAngle: f32,
    pub penetrationRecoverySpeed: f32,
    pub innerBodyShape: *const JPH_Shape,
    pub innerBodyLayer: JPH_ObjectLayer,
}
#[test]
fn bindgen_test_layout_JPH_CharacterVirtualSettings() {
    const UNINIT: ::std::mem::MaybeUninit<JPH_CharacterVirtualSettings> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JPH_CharacterVirtualSettings>(),
        128usize,
        concat!("Size of: ", stringify!(JPH_CharacterVirtualSettings))
    );
    assert_eq!(
        ::std::mem::align_of::<JPH_CharacterVirtualSettings>(),
        8usize,
        concat!("Alignment of ", stringify!(JPH_CharacterVirtualSettings))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_CharacterVirtualSettings),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mass) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_CharacterVirtualSettings),
            "::",
            stringify!(mass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxStrength) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_CharacterVirtualSettings),
            "::",
            stringify!(maxStrength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shapeOffset) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_CharacterVirtualSettings),
            "::",
            stringify!(shapeOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backFaceMode) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_CharacterVirtualSettings),
            "::",
            stringify!(backFaceMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).predictiveContactDistance) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_CharacterVirtualSettings),
            "::",
            stringify!(predictiveContactDistance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxCollisionIterations) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_CharacterVirtualSettings),
            "::",
            stringify!(maxCollisionIterations)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxConstraintIterations) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_CharacterVirtualSettings),
            "::",
            stringify!(maxConstraintIterations)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minTimeRemaining) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_CharacterVirtualSettings),
            "::",
            stringify!(minTimeRemaining)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).collisionTolerance) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_CharacterVirtualSettings),
            "::",
            stringify!(collisionTolerance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).characterPadding) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_CharacterVirtualSettings),
            "::",
            stringify!(characterPadding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxNumHits) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_CharacterVirtualSettings),
            "::",
            stringify!(maxNumHits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hitReductionCosMaxAngle) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_CharacterVirtualSettings),
            "::",
            stringify!(hitReductionCosMaxAngle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).penetrationRecoverySpeed) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_CharacterVirtualSettings),
            "::",
            stringify!(penetrationRecoverySpeed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerBodyShape) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_CharacterVirtualSettings),
            "::",
            stringify!(innerBodyShape)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerBodyLayer) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_CharacterVirtualSettings),
            "::",
            stringify!(innerBodyLayer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_CharacterContactSettings {
    pub canPushCharacter: bool,
    pub canReceiveImpulses: bool,
}
#[test]
fn bindgen_test_layout_JPH_CharacterContactSettings() {
    const UNINIT: ::std::mem::MaybeUninit<JPH_CharacterContactSettings> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JPH_CharacterContactSettings>(),
        2usize,
        concat!("Size of: ", stringify!(JPH_CharacterContactSettings))
    );
    assert_eq!(
        ::std::mem::align_of::<JPH_CharacterContactSettings>(),
        1usize,
        concat!("Alignment of ", stringify!(JPH_CharacterContactSettings))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).canPushCharacter) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_CharacterContactSettings),
            "::",
            stringify!(canPushCharacter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).canReceiveImpulses) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_CharacterContactSettings),
            "::",
            stringify!(canReceiveImpulses)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_CharacterContactListener {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_CharacterVirtual {
    _unused: [u8; 0],
}
pub type JPH_TraceFunc =
    ::std::option::Option<unsafe extern "C" fn(mssage: *const ::std::os::raw::c_char)>;
pub type JPH_AssertFailureFunc = ::std::option::Option<
    unsafe extern "C" fn(
        expression: *const ::std::os::raw::c_char,
        mssage: *const ::std::os::raw::c_char,
        file: *const ::std::os::raw::c_char,
        line: u32,
    ) -> bool,
>;
extern "C" {
    pub fn JPH_Init() -> bool;
}
extern "C" {
    pub fn JPH_Shutdown();
}
extern "C" {
    pub fn JPH_SetTraceHandler(handler: JPH_TraceFunc);
}
extern "C" {
    pub fn JPH_SetAssertFailureHandler(handler: JPH_AssertFailureFunc);
}
extern "C" {
    pub fn JPH_BroadPhaseLayerInterfaceMask_Create(
        numBroadPhaseLayers: u32,
    ) -> *mut JPH_BroadPhaseLayerInterface;
}
extern "C" {
    pub fn JPH_BroadPhaseLayerInterfaceMask_ConfigureLayer(
        bpInterface: *mut JPH_BroadPhaseLayerInterface,
        broadPhaseLayer: JPH_BroadPhaseLayer,
        groupsToInclude: u32,
        groupsToExclude: u32,
    );
}
extern "C" {
    pub fn JPH_BroadPhaseLayerInterfaceTable_Create(
        numObjectLayers: u32,
        numBroadPhaseLayers: u32,
    ) -> *mut JPH_BroadPhaseLayerInterface;
}
extern "C" {
    pub fn JPH_BroadPhaseLayerInterfaceTable_MapObjectToBroadPhaseLayer(
        bpInterface: *mut JPH_BroadPhaseLayerInterface,
        objectLayer: JPH_ObjectLayer,
        broadPhaseLayer: JPH_BroadPhaseLayer,
    );
}
extern "C" {
    pub fn JPH_ObjectLayerPairFilterMask_Create() -> *mut JPH_ObjectLayerPairFilter;
}
extern "C" {
    pub fn JPH_ObjectLayerPairFilterMask_GetObjectLayer(group: u32, mask: u32) -> JPH_ObjectLayer;
}
extern "C" {
    pub fn JPH_ObjectLayerPairFilterMask_GetGroup(layer: JPH_ObjectLayer) -> u32;
}
extern "C" {
    pub fn JPH_ObjectLayerPairFilterMask_GetMask(layer: JPH_ObjectLayer) -> u32;
}
extern "C" {
    pub fn JPH_ObjectLayerPairFilterTable_Create(
        numObjectLayers: u32,
    ) -> *mut JPH_ObjectLayerPairFilter;
}
extern "C" {
    pub fn JPH_ObjectLayerPairFilterTable_DisableCollision(
        objectFilter: *mut JPH_ObjectLayerPairFilter,
        layer1: JPH_ObjectLayer,
        layer2: JPH_ObjectLayer,
    );
}
extern "C" {
    pub fn JPH_ObjectLayerPairFilterTable_EnableCollision(
        objectFilter: *mut JPH_ObjectLayerPairFilter,
        layer1: JPH_ObjectLayer,
        layer2: JPH_ObjectLayer,
    );
}
extern "C" {
    pub fn JPH_ObjectLayerPairFilterTable_ShouldCollide(
        objectFilter: *mut JPH_ObjectLayerPairFilter,
        layer1: JPH_ObjectLayer,
        layer2: JPH_ObjectLayer,
    ) -> bool;
}
extern "C" {
    pub fn JPH_ObjectVsBroadPhaseLayerFilterMask_Create(
        broadPhaseLayerInterface: *const JPH_BroadPhaseLayerInterface,
    ) -> *mut JPH_ObjectVsBroadPhaseLayerFilter;
}
extern "C" {
    pub fn JPH_ObjectVsBroadPhaseLayerFilterTable_Create(
        broadPhaseLayerInterface: *mut JPH_BroadPhaseLayerInterface,
        numBroadPhaseLayers: u32,
        objectLayerPairFilter: *mut JPH_ObjectLayerPairFilter,
        numObjectLayers: u32,
    ) -> *mut JPH_ObjectVsBroadPhaseLayerFilter;
}
extern "C" {
    pub fn JPH_DrawSettings_InitDefault(settings: *mut JPH_DrawSettings);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_PhysicsSystemSettings {
    pub maxBodies: u32,
    pub numBodyMutexes: u32,
    pub maxBodyPairs: u32,
    pub maxContactConstraints: u32,
    pub _padding: u32,
    pub broadPhaseLayerInterface: *mut JPH_BroadPhaseLayerInterface,
    pub objectLayerPairFilter: *mut JPH_ObjectLayerPairFilter,
    pub objectVsBroadPhaseLayerFilter: *mut JPH_ObjectVsBroadPhaseLayerFilter,
}
#[test]
fn bindgen_test_layout_JPH_PhysicsSystemSettings() {
    const UNINIT: ::std::mem::MaybeUninit<JPH_PhysicsSystemSettings> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JPH_PhysicsSystemSettings>(),
        48usize,
        concat!("Size of: ", stringify!(JPH_PhysicsSystemSettings))
    );
    assert_eq!(
        ::std::mem::align_of::<JPH_PhysicsSystemSettings>(),
        8usize,
        concat!("Alignment of ", stringify!(JPH_PhysicsSystemSettings))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxBodies) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_PhysicsSystemSettings),
            "::",
            stringify!(maxBodies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numBodyMutexes) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_PhysicsSystemSettings),
            "::",
            stringify!(numBodyMutexes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxBodyPairs) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_PhysicsSystemSettings),
            "::",
            stringify!(maxBodyPairs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxContactConstraints) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_PhysicsSystemSettings),
            "::",
            stringify!(maxContactConstraints)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._padding) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_PhysicsSystemSettings),
            "::",
            stringify!(_padding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).broadPhaseLayerInterface) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_PhysicsSystemSettings),
            "::",
            stringify!(broadPhaseLayerInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).objectLayerPairFilter) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_PhysicsSystemSettings),
            "::",
            stringify!(objectLayerPairFilter)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).objectVsBroadPhaseLayerFilter) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_PhysicsSystemSettings),
            "::",
            stringify!(objectVsBroadPhaseLayerFilter)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_PhysicsSettings {
    pub maxInFlightBodyPairs: ::std::os::raw::c_int,
    pub stepListenersBatchSize: ::std::os::raw::c_int,
    pub stepListenerBatchesPerJob: ::std::os::raw::c_int,
    pub baumgarte: f32,
    pub speculativeContactDistance: f32,
    pub penetrationSlop: f32,
    pub linearCastThreshold: f32,
    pub linearCastMaxPenetration: f32,
    pub manifoldToleranceSq: f32,
    pub maxPenetrationDistance: f32,
    pub bodyPairCacheMaxDeltaPositionSq: f32,
    pub bodyPairCacheCosMaxDeltaRotationDiv2: f32,
    pub contactNormalCosMaxDeltaRotation: f32,
    pub contactPointPreserveLambdaMaxDistSq: f32,
    pub numVelocitySteps: u32,
    pub numPositionSteps: u32,
    pub minVelocityForRestitution: f32,
    pub timeBeforeSleep: f32,
    pub pointVelocitySleepThreshold: f32,
    pub deterministicSimulation: bool,
    pub constraintWarmStart: bool,
    pub useBodyPairContactCache: bool,
    pub useManifoldReduction: bool,
    pub useLargeIslandSplitter: bool,
    pub allowSleeping: bool,
    pub checkActiveEdges: bool,
}
#[test]
fn bindgen_test_layout_JPH_PhysicsSettings() {
    const UNINIT: ::std::mem::MaybeUninit<JPH_PhysicsSettings> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JPH_PhysicsSettings>(),
        84usize,
        concat!("Size of: ", stringify!(JPH_PhysicsSettings))
    );
    assert_eq!(
        ::std::mem::align_of::<JPH_PhysicsSettings>(),
        4usize,
        concat!("Alignment of ", stringify!(JPH_PhysicsSettings))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxInFlightBodyPairs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_PhysicsSettings),
            "::",
            stringify!(maxInFlightBodyPairs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stepListenersBatchSize) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_PhysicsSettings),
            "::",
            stringify!(stepListenersBatchSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stepListenerBatchesPerJob) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_PhysicsSettings),
            "::",
            stringify!(stepListenerBatchesPerJob)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baumgarte) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_PhysicsSettings),
            "::",
            stringify!(baumgarte)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).speculativeContactDistance) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_PhysicsSettings),
            "::",
            stringify!(speculativeContactDistance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).penetrationSlop) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_PhysicsSettings),
            "::",
            stringify!(penetrationSlop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).linearCastThreshold) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_PhysicsSettings),
            "::",
            stringify!(linearCastThreshold)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).linearCastMaxPenetration) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_PhysicsSettings),
            "::",
            stringify!(linearCastMaxPenetration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).manifoldToleranceSq) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_PhysicsSettings),
            "::",
            stringify!(manifoldToleranceSq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxPenetrationDistance) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_PhysicsSettings),
            "::",
            stringify!(maxPenetrationDistance)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).bodyPairCacheMaxDeltaPositionSq) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_PhysicsSettings),
            "::",
            stringify!(bodyPairCacheMaxDeltaPositionSq)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).bodyPairCacheCosMaxDeltaRotationDiv2) as usize
                - ptr as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_PhysicsSettings),
            "::",
            stringify!(bodyPairCacheCosMaxDeltaRotationDiv2)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).contactNormalCosMaxDeltaRotation) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_PhysicsSettings),
            "::",
            stringify!(contactNormalCosMaxDeltaRotation)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).contactPointPreserveLambdaMaxDistSq) as usize - ptr as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_PhysicsSettings),
            "::",
            stringify!(contactPointPreserveLambdaMaxDistSq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numVelocitySteps) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_PhysicsSettings),
            "::",
            stringify!(numVelocitySteps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numPositionSteps) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_PhysicsSettings),
            "::",
            stringify!(numPositionSteps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minVelocityForRestitution) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_PhysicsSettings),
            "::",
            stringify!(minVelocityForRestitution)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeBeforeSleep) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_PhysicsSettings),
            "::",
            stringify!(timeBeforeSleep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pointVelocitySleepThreshold) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_PhysicsSettings),
            "::",
            stringify!(pointVelocitySleepThreshold)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deterministicSimulation) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_PhysicsSettings),
            "::",
            stringify!(deterministicSimulation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).constraintWarmStart) as usize - ptr as usize },
        77usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_PhysicsSettings),
            "::",
            stringify!(constraintWarmStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).useBodyPairContactCache) as usize - ptr as usize },
        78usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_PhysicsSettings),
            "::",
            stringify!(useBodyPairContactCache)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).useManifoldReduction) as usize - ptr as usize },
        79usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_PhysicsSettings),
            "::",
            stringify!(useManifoldReduction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).useLargeIslandSplitter) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_PhysicsSettings),
            "::",
            stringify!(useLargeIslandSplitter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allowSleeping) as usize - ptr as usize },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_PhysicsSettings),
            "::",
            stringify!(allowSleeping)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).checkActiveEdges) as usize - ptr as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_PhysicsSettings),
            "::",
            stringify!(checkActiveEdges)
        )
    );
}
extern "C" {
    pub fn JPH_PhysicsSystem_Create(
        settings: *const JPH_PhysicsSystemSettings,
    ) -> *mut JPH_PhysicsSystem;
}
extern "C" {
    pub fn JPH_PhysicsSystem_Destroy(system: *mut JPH_PhysicsSystem);
}
extern "C" {
    pub fn JPH_PhysicsSystem_SetPhysicsSettings(
        system: *mut JPH_PhysicsSystem,
        settings: *mut JPH_PhysicsSettings,
    );
}
extern "C" {
    pub fn JPH_PhysicsSystem_GetPhysicsSettings(
        system: *mut JPH_PhysicsSystem,
        result: *mut JPH_PhysicsSettings,
    );
}
extern "C" {
    pub fn JPH_PhysicsSystem_OptimizeBroadPhase(system: *mut JPH_PhysicsSystem);
}
extern "C" {
    pub fn JPH_PhysicsSystem_Update(
        system: *mut JPH_PhysicsSystem,
        deltaTime: f32,
        collisionSteps: ::std::os::raw::c_int,
    ) -> JPH_PhysicsUpdateError;
}
extern "C" {
    pub fn JPH_PhysicsSystem_Step(
        system: *mut JPH_PhysicsSystem,
        deltaTime: f32,
        collisionSteps: ::std::os::raw::c_int,
    ) -> JPH_PhysicsUpdateError;
}
extern "C" {
    pub fn JPH_PhysicsSystem_GetBodyInterface(
        system: *mut JPH_PhysicsSystem,
    ) -> *mut JPH_BodyInterface;
}
extern "C" {
    pub fn JPH_PhysicsSystem_GetBodyInterfaceNoLock(
        system: *mut JPH_PhysicsSystem,
    ) -> *mut JPH_BodyInterface;
}
extern "C" {
    pub fn JPH_PhysicsSystem_GetBodyLockInterface(
        system: *const JPH_PhysicsSystem,
    ) -> *const JPH_BodyLockInterface;
}
extern "C" {
    pub fn JPH_PhysicsSystem_GetBodyLockInterfaceNoLock(
        system: *const JPH_PhysicsSystem,
    ) -> *const JPH_BodyLockInterface;
}
extern "C" {
    pub fn JPH_PhysicsSystem_GetBroadPhaseQuery(
        system: *const JPH_PhysicsSystem,
    ) -> *const JPH_BroadPhaseQuery;
}
extern "C" {
    pub fn JPH_PhysicsSystem_GetNarrowPhaseQuery(
        system: *const JPH_PhysicsSystem,
    ) -> *const JPH_NarrowPhaseQuery;
}
extern "C" {
    pub fn JPH_PhysicsSystem_GetNarrowPhaseQueryNoLock(
        system: *const JPH_PhysicsSystem,
    ) -> *const JPH_NarrowPhaseQuery;
}
extern "C" {
    pub fn JPH_PhysicsSystem_SetContactListener(
        system: *mut JPH_PhysicsSystem,
        listener: *mut JPH_ContactListener,
    );
}
extern "C" {
    pub fn JPH_PhysicsSystem_SetBodyActivationListener(
        system: *mut JPH_PhysicsSystem,
        listener: *mut JPH_BodyActivationListener,
    );
}
extern "C" {
    pub fn JPH_PhysicsSystem_WereBodiesInContact(
        system: *const JPH_PhysicsSystem,
        body1: JPH_BodyID,
        body2: JPH_BodyID,
    ) -> bool;
}
extern "C" {
    pub fn JPH_PhysicsSystem_GetNumBodies(system: *const JPH_PhysicsSystem) -> u32;
}
extern "C" {
    pub fn JPH_PhysicsSystem_GetNumActiveBodies(
        system: *const JPH_PhysicsSystem,
        type_: JPH_BodyType,
    ) -> u32;
}
extern "C" {
    pub fn JPH_PhysicsSystem_GetMaxBodies(system: *const JPH_PhysicsSystem) -> u32;
}
extern "C" {
    pub fn JPH_PhysicsSystem_GetNumConstraints(system: *const JPH_PhysicsSystem) -> u32;
}
extern "C" {
    pub fn JPH_PhysicsSystem_SetGravity(system: *mut JPH_PhysicsSystem, value: *const JPH_Vec3);
}
extern "C" {
    pub fn JPH_PhysicsSystem_GetGravity(system: *mut JPH_PhysicsSystem, result: *mut JPH_Vec3);
}
extern "C" {
    pub fn JPH_PhysicsSystem_AddConstraint(
        system: *mut JPH_PhysicsSystem,
        constraint: *mut JPH_Constraint,
    );
}
extern "C" {
    pub fn JPH_PhysicsSystem_RemoveConstraint(
        system: *mut JPH_PhysicsSystem,
        constraint: *mut JPH_Constraint,
    );
}
extern "C" {
    pub fn JPH_PhysicsSystem_AddConstraints(
        system: *mut JPH_PhysicsSystem,
        constraints: *mut *mut JPH_Constraint,
        count: u32,
    );
}
extern "C" {
    pub fn JPH_PhysicsSystem_RemoveConstraints(
        system: *mut JPH_PhysicsSystem,
        constraints: *mut *mut JPH_Constraint,
        count: u32,
    );
}
extern "C" {
    pub fn JPH_PhysicsSystem_GetBodies(
        system: *const JPH_PhysicsSystem,
        ids: *mut JPH_BodyID,
        count: u32,
    );
}
extern "C" {
    pub fn JPH_PhysicsSystem_GetConstraints(
        system: *const JPH_PhysicsSystem,
        constraints: *mut *const JPH_Constraint,
        count: u32,
    );
}
extern "C" {
    pub fn JPH_PhysicsSystem_DrawBodies(
        system: *mut JPH_PhysicsSystem,
        settings: *const JPH_DrawSettings,
        renderer: *mut JPH_DebugRenderer,
        bodyFilter: *const JPH_BodyDrawFilter,
    );
}
extern "C" {
    pub fn JPH_PhysicsSystem_DrawConstraints(
        system: *mut JPH_PhysicsSystem,
        renderer: *mut JPH_DebugRenderer,
    );
}
extern "C" {
    pub fn JPH_PhysicsSystem_DrawConstraintLimits(
        system: *mut JPH_PhysicsSystem,
        renderer: *mut JPH_DebugRenderer,
    );
}
extern "C" {
    pub fn JPH_PhysicsSystem_DrawConstraintReferenceFrame(
        system: *mut JPH_PhysicsSystem,
        renderer: *mut JPH_DebugRenderer,
    );
}
extern "C" {
    pub fn JPH_Quaternion_FromTo(from: *const JPH_Vec3, to: *const JPH_Vec3, quat: *mut JPH_Quat);
}
extern "C" {
    pub fn JPH_PhysicsMaterial_Create() -> *mut JPH_PhysicsMaterial;
}
extern "C" {
    pub fn JPH_PhysicsMaterial_Destroy(material: *mut JPH_PhysicsMaterial);
}
extern "C" {
    pub fn JPH_ShapeSettings_Destroy(settings: *mut JPH_ShapeSettings);
}
extern "C" {
    pub fn JPH_ShapeSettings_GetUserData(settings: *const JPH_ShapeSettings) -> u64;
}
extern "C" {
    pub fn JPH_ShapeSettings_SetUserData(settings: *mut JPH_ShapeSettings, userData: u64);
}
extern "C" {
    pub fn JPH_Shape_Destroy(shape: *mut JPH_Shape);
}
extern "C" {
    pub fn JPH_Shape_GetType(shape: *const JPH_Shape) -> JPH_ShapeType;
}
extern "C" {
    pub fn JPH_Shape_GetSubType(shape: *const JPH_Shape) -> JPH_ShapeSubType;
}
extern "C" {
    pub fn JPH_Shape_GetUserData(shape: *const JPH_Shape) -> u64;
}
extern "C" {
    pub fn JPH_Shape_SetUserData(shape: *mut JPH_Shape, userData: u64);
}
extern "C" {
    pub fn JPH_Shape_MustBeStatic(shape: *const JPH_Shape) -> bool;
}
extern "C" {
    pub fn JPH_Shape_GetCenterOfMass(shape: *const JPH_Shape, result: *mut JPH_Vec3);
}
extern "C" {
    pub fn JPH_Shape_GetLocalBounds(shape: *const JPH_Shape, result: *mut JPH_AABox);
}
extern "C" {
    pub fn JPH_Shape_GetSubShapeIDBitsRecursive(shape: *const JPH_Shape) -> u32;
}
extern "C" {
    pub fn JPH_Shape_GetWorldSpaceBounds(
        shape: *const JPH_Shape,
        centerOfMassTransform: *mut JPH_RMatrix4x4,
        scale: *mut JPH_Vec3,
        result: *mut JPH_AABox,
    );
}
extern "C" {
    pub fn JPH_Shape_GetInnerRadius(shape: *const JPH_Shape) -> f32;
}
extern "C" {
    pub fn JPH_Shape_GetMassProperties(shape: *const JPH_Shape, result: *mut JPH_MassProperties);
}
extern "C" {
    pub fn JPH_Shape_GetLeafShape(
        shape: *const JPH_Shape,
        subShapeID: JPH_SubShapeID,
        remainder: *mut JPH_SubShapeID,
    ) -> *const JPH_Shape;
}
extern "C" {
    pub fn JPH_Shape_GetMaterial(
        shape: *const JPH_Shape,
        subShapeID: JPH_SubShapeID,
    ) -> *const JPH_PhysicsMaterial;
}
extern "C" {
    pub fn JPH_Shape_GetSurfaceNormal(
        shape: *const JPH_Shape,
        subShapeID: JPH_SubShapeID,
        localPosition: *mut JPH_Vec3,
        normal: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_Shape_GetVolume(shape: *const JPH_Shape) -> f32;
}
extern "C" {
    pub fn JPH_Shape_CastRay(
        shape: *const JPH_Shape,
        origin: *const JPH_Vec3,
        direction: *const JPH_Vec3,
        hit: *mut JPH_RayCastResult,
    ) -> bool;
}
extern "C" {
    pub fn JPH_Shape_CastRay2(
        shape: *const JPH_Shape,
        origin: *const JPH_Vec3,
        direction: *const JPH_Vec3,
        rayCastSettings: *const JPH_RayCastSettings,
        collectorType: JPH_CollisionCollectorType,
        callback: JPH_CastRayResultCallback,
        userData: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn JPH_Shape_CollidePoint(shape: *const JPH_Shape, point: *const JPH_Vec3) -> bool;
}
extern "C" {
    pub fn JPH_Shape_CollidePoint2(
        shape: *const JPH_Shape,
        point: *const JPH_Vec3,
        collectorType: JPH_CollisionCollectorType,
        callback: JPH_CollidePointResultCallback,
        userData: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn JPH_ConvexShapeSettings_GetDensity(shape: *const JPH_ConvexShapeSettings) -> f32;
}
extern "C" {
    pub fn JPH_ConvexShapeSettings_SetDensity(shape: *mut JPH_ConvexShapeSettings, value: f32);
}
extern "C" {
    pub fn JPH_ConvexShape_GetDensity(shape: *const JPH_ConvexShape) -> f32;
}
extern "C" {
    pub fn JPH_ConvexShape_SetDensity(shape: *mut JPH_ConvexShape, inDensity: f32);
}
extern "C" {
    pub fn JPH_BoxShapeSettings_Create(
        halfExtent: *const JPH_Vec3,
        convexRadius: f32,
    ) -> *mut JPH_BoxShapeSettings;
}
extern "C" {
    pub fn JPH_BoxShapeSettings_CreateShape(
        settings: *const JPH_BoxShapeSettings,
    ) -> *mut JPH_BoxShape;
}
extern "C" {
    pub fn JPH_BoxShape_Create(halfExtent: *const JPH_Vec3, convexRadius: f32)
        -> *mut JPH_BoxShape;
}
extern "C" {
    pub fn JPH_BoxShape_GetHalfExtent(shape: *const JPH_BoxShape, halfExtent: *mut JPH_Vec3);
}
extern "C" {
    pub fn JPH_BoxShape_GetConvexRadius(shape: *const JPH_BoxShape) -> f32;
}
extern "C" {
    pub fn JPH_SphereShapeSettings_Create(radius: f32) -> *mut JPH_SphereShapeSettings;
}
extern "C" {
    pub fn JPH_SphereShapeSettings_CreateShape(
        settings: *const JPH_SphereShapeSettings,
    ) -> *mut JPH_SphereShape;
}
extern "C" {
    pub fn JPH_SphereShapeSettings_GetRadius(settings: *const JPH_SphereShapeSettings) -> f32;
}
extern "C" {
    pub fn JPH_SphereShapeSettings_SetRadius(settings: *mut JPH_SphereShapeSettings, radius: f32);
}
extern "C" {
    pub fn JPH_SphereShape_Create(radius: f32) -> *mut JPH_SphereShape;
}
extern "C" {
    pub fn JPH_SphereShape_GetRadius(shape: *const JPH_SphereShape) -> f32;
}
extern "C" {
    pub fn JPH_PlaneShapeSettings_Create(
        plane: *const JPH_Plane,
        material: *const JPH_PhysicsMaterial,
        halfExtent: f32,
    ) -> *mut JPH_PlaneShapeSettings;
}
extern "C" {
    pub fn JPH_PlaneShapeSettings_CreateShape(
        settings: *const JPH_PlaneShapeSettings,
    ) -> *mut JPH_PlaneShape;
}
extern "C" {
    pub fn JPH_PlaneShape_Create(
        plane: *const JPH_Plane,
        material: *const JPH_PhysicsMaterial,
        halfExtent: f32,
    ) -> *mut JPH_PlaneShape;
}
extern "C" {
    pub fn JPH_PlaneShape_GetPlane(shape: *const JPH_PlaneShape, result: *mut JPH_Plane);
}
extern "C" {
    pub fn JPH_PlaneShape_GetHalfExtent(shape: *const JPH_PlaneShape) -> f32;
}
extern "C" {
    pub fn JPH_TriangleShapeSettings_Create(
        v1: *const JPH_Vec3,
        v2: *const JPH_Vec3,
        v3: *const JPH_Vec3,
        convexRadius: f32,
    ) -> *mut JPH_TriangleShapeSettings;
}
extern "C" {
    pub fn JPH_TriangleShapeSettings_CreateShape(
        settings: *const JPH_TriangleShapeSettings,
    ) -> *mut JPH_TriangleShape;
}
extern "C" {
    pub fn JPH_TriangleShape_Create(
        v1: *const JPH_Vec3,
        v2: *const JPH_Vec3,
        v3: *const JPH_Vec3,
        convexRadius: f32,
    ) -> *mut JPH_TriangleShape;
}
extern "C" {
    pub fn JPH_TriangleShape_GetConvexRadius(shape: *const JPH_TriangleShape) -> f32;
}
extern "C" {
    pub fn JPH_TriangleShape_GetVertex1(shape: *const JPH_TriangleShape, result: *mut JPH_Vec3);
}
extern "C" {
    pub fn JPH_TriangleShape_GetVertex2(shape: *const JPH_TriangleShape, result: *mut JPH_Vec3);
}
extern "C" {
    pub fn JPH_TriangleShape_GetVertex3(shape: *const JPH_TriangleShape, result: *mut JPH_Vec3);
}
extern "C" {
    pub fn JPH_CapsuleShapeSettings_Create(
        halfHeightOfCylinder: f32,
        radius: f32,
    ) -> *mut JPH_CapsuleShapeSettings;
}
extern "C" {
    pub fn JPH_CapsuleShapeSettings_CreateShape(
        settings: *const JPH_CapsuleShapeSettings,
    ) -> *mut JPH_CapsuleShape;
}
extern "C" {
    pub fn JPH_CapsuleShape_Create(halfHeightOfCylinder: f32, radius: f32)
        -> *mut JPH_CapsuleShape;
}
extern "C" {
    pub fn JPH_CapsuleShape_GetRadius(shape: *const JPH_CapsuleShape) -> f32;
}
extern "C" {
    pub fn JPH_CapsuleShape_GetHalfHeightOfCylinder(shape: *const JPH_CapsuleShape) -> f32;
}
extern "C" {
    pub fn JPH_CylinderShapeSettings_Create(
        halfHeight: f32,
        radius: f32,
        convexRadius: f32,
    ) -> *mut JPH_CylinderShapeSettings;
}
extern "C" {
    pub fn JPH_CylinderShapeSettings_CreateShape(
        settings: *const JPH_CylinderShapeSettings,
    ) -> *mut JPH_CylinderShape;
}
extern "C" {
    pub fn JPH_CylinderShape_Create(halfHeight: f32, radius: f32) -> *mut JPH_CylinderShape;
}
extern "C" {
    pub fn JPH_CylinderShape_GetRadius(shape: *const JPH_CylinderShape) -> f32;
}
extern "C" {
    pub fn JPH_CylinderShape_GetHalfHeight(shape: *const JPH_CylinderShape) -> f32;
}
extern "C" {
    pub fn JPH_TaperedCylinderShapeSettings_Create(
        halfHeightOfTaperedCylinder: f32,
        topRadius: f32,
        bottomRadius: f32,
        convexRadius: f32,
        material: *const JPH_PhysicsMaterial,
    ) -> *mut JPH_TaperedCylinderShapeSettings;
}
extern "C" {
    pub fn JPH_TaperedCylinderShapeSettings_CreateShape(
        settings: *const JPH_TaperedCylinderShapeSettings,
    ) -> *mut JPH_TaperedCylinderShape;
}
extern "C" {
    pub fn JPH_TaperedCylinderShape_GetTopRadius(shape: *const JPH_TaperedCylinderShape) -> f32;
}
extern "C" {
    pub fn JPH_TaperedCylinderShape_GetBottomRadius(shape: *const JPH_TaperedCylinderShape) -> f32;
}
extern "C" {
    pub fn JPH_TaperedCylinderShape_GetConvexRadius(shape: *const JPH_TaperedCylinderShape) -> f32;
}
extern "C" {
    pub fn JPH_TaperedCylinderShape_GetHalfHeight(shape: *const JPH_TaperedCylinderShape) -> f32;
}
extern "C" {
    pub fn JPH_ConvexHullShapeSettings_Create(
        points: *const JPH_Vec3,
        pointsCount: u32,
        maxConvexRadius: f32,
    ) -> *mut JPH_ConvexHullShapeSettings;
}
extern "C" {
    pub fn JPH_ConvexHullShapeSettings_CreateShape(
        settings: *const JPH_ConvexHullShapeSettings,
    ) -> *mut JPH_ConvexHullShape;
}
extern "C" {
    pub fn JPH_ConvexHullShape_GetNumPoints(shape: *const JPH_ConvexHullShape) -> u32;
}
extern "C" {
    pub fn JPH_ConvexHullShape_GetPoint(
        shape: *const JPH_ConvexHullShape,
        index: u32,
        result: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_ConvexHullShape_GetNumFaces(shape: *const JPH_ConvexHullShape) -> u32;
}
extern "C" {
    pub fn JPH_ConvexHullShape_GetNumVerticesInFace(
        shape: *const JPH_ConvexHullShape,
        faceIndex: u32,
    ) -> u32;
}
extern "C" {
    pub fn JPH_ConvexHullShape_GetFaceVertices(
        shape: *const JPH_ConvexHullShape,
        faceIndex: u32,
        maxVertices: u32,
        vertices: *mut u32,
    ) -> u32;
}
extern "C" {
    pub fn JPH_MeshShapeSettings_Create(
        triangles: *const JPH_Triangle,
        triangleCount: u32,
    ) -> *mut JPH_MeshShapeSettings;
}
extern "C" {
    pub fn JPH_MeshShapeSettings_Create2(
        vertices: *const JPH_Vec3,
        verticesCount: u32,
        triangles: *const JPH_IndexedTriangle,
        triangleCount: u32,
    ) -> *mut JPH_MeshShapeSettings;
}
extern "C" {
    pub fn JPH_MeshShapeSettings_GetPerTriangleUserData(
        settings: *const JPH_MeshShapeSettings,
    ) -> bool;
}
extern "C" {
    pub fn JPH_MeshShapeSettings_SetPerTriangleUserData(
        settings: *mut JPH_MeshShapeSettings,
        perTriangleUserData: bool,
    );
}
extern "C" {
    pub fn JPH_MeshShapeSettings_Sanitize(settings: *mut JPH_MeshShapeSettings);
}
extern "C" {
    pub fn JPH_MeshShapeSettings_CreateShape(
        settings: *const JPH_MeshShapeSettings,
    ) -> *mut JPH_MeshShape;
}
extern "C" {
    pub fn JPH_MeshShape_GetTriangleUserData(
        shape: *const JPH_MeshShape,
        id: JPH_SubShapeID,
    ) -> u32;
}
extern "C" {
    pub fn JPH_HeightFieldShapeSettings_Create(
        samples: *const f32,
        offset: *const JPH_Vec3,
        scale: *const JPH_Vec3,
        sampleCount: u32,
    ) -> *mut JPH_HeightFieldShapeSettings;
}
extern "C" {
    pub fn JPH_HeightFieldShapeSettings_CreateShape(
        settings: *mut JPH_HeightFieldShapeSettings,
    ) -> *mut JPH_HeightFieldShape;
}
extern "C" {
    pub fn JPH_HeightFieldShapeSettings_DetermineMinAndMaxSample(
        settings: *const JPH_HeightFieldShapeSettings,
        pOutMinValue: *mut f32,
        pOutMaxValue: *mut f32,
        pOutQuantizationScale: *mut f32,
    );
}
extern "C" {
    pub fn JPH_HeightFieldShapeSettings_CalculateBitsPerSampleForError(
        settings: *const JPH_HeightFieldShapeSettings,
        maxError: f32,
    ) -> u32;
}
extern "C" {
    pub fn JPH_HeightFieldShape_GetSampleCount(shape: *const JPH_HeightFieldShape) -> u32;
}
extern "C" {
    pub fn JPH_HeightFieldShape_GetBlockSize(shape: *const JPH_HeightFieldShape) -> u32;
}
extern "C" {
    pub fn JPH_HeightFieldShape_GetMaterial(
        shape: *const JPH_HeightFieldShape,
        x: u32,
        y: u32,
    ) -> *const JPH_PhysicsMaterial;
}
extern "C" {
    pub fn JPH_HeightFieldShape_GetPosition(
        shape: *const JPH_HeightFieldShape,
        x: u32,
        y: u32,
        result: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_HeightFieldShape_IsNoCollision(
        shape: *const JPH_HeightFieldShape,
        x: u32,
        y: u32,
    ) -> bool;
}
extern "C" {
    pub fn JPH_HeightFieldShape_ProjectOntoSurface(
        shape: *const JPH_HeightFieldShape,
        localPosition: *const JPH_Vec3,
        outSurfacePosition: *mut JPH_Vec3,
        outSubShapeID: *mut JPH_SubShapeID,
    ) -> bool;
}
extern "C" {
    pub fn JPH_HeightFieldShape_GetMinHeightValue(shape: *const JPH_HeightFieldShape) -> f32;
}
extern "C" {
    pub fn JPH_HeightFieldShape_GetMaxHeightValue(shape: *const JPH_HeightFieldShape) -> f32;
}
extern "C" {
    pub fn JPH_TaperedCapsuleShapeSettings_Create(
        halfHeightOfTaperedCylinder: f32,
        topRadius: f32,
        bottomRadius: f32,
    ) -> *mut JPH_TaperedCapsuleShapeSettings;
}
extern "C" {
    pub fn JPH_TaperedCapsuleShapeSettings_CreateShape(
        settings: *mut JPH_TaperedCapsuleShapeSettings,
    ) -> *mut JPH_TaperedCapsuleShape;
}
extern "C" {
    pub fn JPH_TaperedCapsuleShape_GetTopRadius(shape: *const JPH_TaperedCapsuleShape) -> f32;
}
extern "C" {
    pub fn JPH_TaperedCapsuleShape_GetBottomRadius(shape: *const JPH_TaperedCapsuleShape) -> f32;
}
extern "C" {
    pub fn JPH_TaperedCapsuleShape_GetHalfHeight(shape: *const JPH_TaperedCapsuleShape) -> f32;
}
extern "C" {
    pub fn JPH_CompoundShapeSettings_AddShape(
        settings: *mut JPH_CompoundShapeSettings,
        position: *const JPH_Vec3,
        rotation: *const JPH_Quat,
        shape: *const JPH_ShapeSettings,
        userData: u32,
    );
}
extern "C" {
    pub fn JPH_CompoundShapeSettings_AddShape2(
        settings: *mut JPH_CompoundShapeSettings,
        position: *const JPH_Vec3,
        rotation: *const JPH_Quat,
        shape: *const JPH_Shape,
        userData: u32,
    );
}
extern "C" {
    pub fn JPH_CompoundShape_GetNumSubShapes(shape: *const JPH_CompoundShape) -> u32;
}
extern "C" {
    pub fn JPH_CompoundShape_GetSubShape(
        shape: *const JPH_CompoundShape,
        index: u32,
        subShape: *mut *const JPH_Shape,
        positionCOM: *mut JPH_Vec3,
        rotation: *mut JPH_Quat,
        userData: *mut u32,
    );
}
extern "C" {
    pub fn JPH_CompoundShape_GetSubShapeIndexFromID(
        shape: *const JPH_CompoundShape,
        id: JPH_SubShapeID,
        remainder: *mut JPH_SubShapeID,
    ) -> u32;
}
extern "C" {
    pub fn JPH_StaticCompoundShapeSettings_Create() -> *mut JPH_StaticCompoundShapeSettings;
}
extern "C" {
    pub fn JPH_StaticCompoundShape_Create(
        settings: *const JPH_StaticCompoundShapeSettings,
    ) -> *mut JPH_StaticCompoundShape;
}
extern "C" {
    pub fn JPH_MutableCompoundShapeSettings_Create() -> *mut JPH_MutableCompoundShapeSettings;
}
extern "C" {
    pub fn JPH_MutableCompoundShape_Create(
        settings: *const JPH_MutableCompoundShapeSettings,
    ) -> *mut JPH_MutableCompoundShape;
}
extern "C" {
    pub fn JPH_MutableCompoundShape_AddShape(
        shape: *mut JPH_MutableCompoundShape,
        position: *const JPH_Vec3,
        rotation: *const JPH_Quat,
        child: *const JPH_Shape,
        userData: u32,
    ) -> u32;
}
extern "C" {
    pub fn JPH_MutableCompoundShape_RemoveShape(shape: *mut JPH_MutableCompoundShape, index: u32);
}
extern "C" {
    pub fn JPH_MutableCompoundShape_ModifyShape(
        shape: *mut JPH_MutableCompoundShape,
        index: u32,
        position: *const JPH_Vec3,
        rotation: *const JPH_Quat,
    );
}
extern "C" {
    pub fn JPH_MutableCompoundShape_ModifyShape2(
        shape: *mut JPH_MutableCompoundShape,
        index: u32,
        position: *const JPH_Vec3,
        rotation: *const JPH_Quat,
        newShape: *const JPH_Shape,
    );
}
extern "C" {
    pub fn JPH_MutableCompoundShape_AdjustCenterOfMass(shape: *mut JPH_MutableCompoundShape);
}
extern "C" {
    pub fn JPH_DecoratedShape_GetInnerShape(shape: *const JPH_DecoratedShape) -> *const JPH_Shape;
}
extern "C" {
    pub fn JPH_RotatedTranslatedShapeSettings_Create(
        position: *const JPH_Vec3,
        rotation: *const JPH_Quat,
        shapeSettings: *const JPH_ShapeSettings,
    ) -> *mut JPH_RotatedTranslatedShapeSettings;
}
extern "C" {
    pub fn JPH_RotatedTranslatedShapeSettings_Create2(
        position: *const JPH_Vec3,
        rotation: *const JPH_Quat,
        shape: *const JPH_Shape,
    ) -> *mut JPH_RotatedTranslatedShapeSettings;
}
extern "C" {
    pub fn JPH_RotatedTranslatedShapeSettings_CreateShape(
        settings: *const JPH_RotatedTranslatedShapeSettings,
    ) -> *mut JPH_RotatedTranslatedShape;
}
extern "C" {
    pub fn JPH_RotatedTranslatedShape_Create(
        position: *const JPH_Vec3,
        rotation: *const JPH_Quat,
        shape: *const JPH_Shape,
    ) -> *mut JPH_RotatedTranslatedShape;
}
extern "C" {
    pub fn JPH_RotatedTranslatedShape_GetPosition(
        shape: *const JPH_RotatedTranslatedShape,
        position: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_RotatedTranslatedShape_GetRotation(
        shape: *const JPH_RotatedTranslatedShape,
        rotation: *mut JPH_Quat,
    );
}
extern "C" {
    pub fn JPH_ScaledShapeSettings_Create(
        shapeSettings: *const JPH_ShapeSettings,
        scale: *const JPH_Vec3,
    ) -> *mut JPH_ScaledShapeSettings;
}
extern "C" {
    pub fn JPH_ScaledShapeSettings_Create2(
        shape: *const JPH_Shape,
        scale: *const JPH_Vec3,
    ) -> *mut JPH_ScaledShapeSettings;
}
extern "C" {
    pub fn JPH_ScaledShapeSettings_CreateShape(
        settings: *const JPH_ScaledShapeSettings,
    ) -> *mut JPH_ScaledShape;
}
extern "C" {
    pub fn JPH_ScaledShape_Create(
        shape: *const JPH_Shape,
        scale: *const JPH_Vec3,
    ) -> *mut JPH_ScaledShape;
}
extern "C" {
    pub fn JPH_ScaledShape_GetScale(shape: *const JPH_ScaledShape, result: *mut JPH_Vec3);
}
extern "C" {
    pub fn JPH_OffsetCenterOfMassShapeSettings_Create(
        offset: *const JPH_Vec3,
        shapeSettings: *const JPH_ShapeSettings,
    ) -> *mut JPH_OffsetCenterOfMassShapeSettings;
}
extern "C" {
    pub fn JPH_OffsetCenterOfMassShapeSettings_Create2(
        offset: *const JPH_Vec3,
        shape: *const JPH_Shape,
    ) -> *mut JPH_OffsetCenterOfMassShapeSettings;
}
extern "C" {
    pub fn JPH_OffsetCenterOfMassShapeSettings_CreateShape(
        settings: *const JPH_OffsetCenterOfMassShapeSettings,
    ) -> *mut JPH_OffsetCenterOfMassShape;
}
extern "C" {
    pub fn JPH_OffsetCenterOfMassShape_Create(
        offset: *const JPH_Vec3,
        shape: *const JPH_Shape,
    ) -> *mut JPH_OffsetCenterOfMassShape;
}
extern "C" {
    pub fn JPH_OffsetCenterOfMassShape_GetOffset(
        shape: *const JPH_OffsetCenterOfMassShape,
        result: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_EmptyShapeSettings_Create(
        centerOfMass: *const JPH_Vec3,
    ) -> *mut JPH_EmptyShapeSettings;
}
extern "C" {
    pub fn JPH_EmptyShapeSettings_CreateShape(
        settings: *const JPH_EmptyShapeSettings,
    ) -> *mut JPH_EmptyShape;
}
extern "C" {
    pub fn JPH_BodyCreationSettings_Create() -> *mut JPH_BodyCreationSettings;
}
extern "C" {
    pub fn JPH_BodyCreationSettings_Create2(
        settings: *mut JPH_ShapeSettings,
        position: *const JPH_RVec3,
        rotation: *const JPH_Quat,
        motionType: JPH_MotionType,
        objectLayer: JPH_ObjectLayer,
    ) -> *mut JPH_BodyCreationSettings;
}
extern "C" {
    pub fn JPH_BodyCreationSettings_Create3(
        shape: *const JPH_Shape,
        position: *const JPH_RVec3,
        rotation: *const JPH_Quat,
        motionType: JPH_MotionType,
        objectLayer: JPH_ObjectLayer,
    ) -> *mut JPH_BodyCreationSettings;
}
extern "C" {
    pub fn JPH_BodyCreationSettings_Destroy(settings: *mut JPH_BodyCreationSettings);
}
extern "C" {
    pub fn JPH_BodyCreationSettings_GetPosition(
        settings: *mut JPH_BodyCreationSettings,
        result: *mut JPH_RVec3,
    );
}
extern "C" {
    pub fn JPH_BodyCreationSettings_SetPosition(
        settings: *mut JPH_BodyCreationSettings,
        value: *const JPH_RVec3,
    );
}
extern "C" {
    pub fn JPH_BodyCreationSettings_GetRotation(
        settings: *mut JPH_BodyCreationSettings,
        result: *mut JPH_Quat,
    );
}
extern "C" {
    pub fn JPH_BodyCreationSettings_SetRotation(
        settings: *mut JPH_BodyCreationSettings,
        value: *const JPH_Quat,
    );
}
extern "C" {
    pub fn JPH_BodyCreationSettings_GetLinearVelocity(
        settings: *mut JPH_BodyCreationSettings,
        velocity: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_BodyCreationSettings_SetLinearVelocity(
        settings: *mut JPH_BodyCreationSettings,
        velocity: *const JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_BodyCreationSettings_GetAngularVelocity(
        settings: *mut JPH_BodyCreationSettings,
        velocity: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_BodyCreationSettings_SetAngularVelocity(
        settings: *mut JPH_BodyCreationSettings,
        velocity: *const JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_BodyCreationSettings_GetMotionType(
        settings: *mut JPH_BodyCreationSettings,
    ) -> JPH_MotionType;
}
extern "C" {
    pub fn JPH_BodyCreationSettings_SetMotionType(
        settings: *mut JPH_BodyCreationSettings,
        value: JPH_MotionType,
    );
}
extern "C" {
    pub fn JPH_BodyCreationSettings_GetAllowedDOFs(
        settings: *mut JPH_BodyCreationSettings,
    ) -> JPH_AllowedDOFs;
}
extern "C" {
    pub fn JPH_BodyCreationSettings_SetAllowedDOFs(
        settings: *mut JPH_BodyCreationSettings,
        value: JPH_AllowedDOFs,
    );
}
extern "C" {
    pub fn JPH_SoftBodyCreationSettings_Create() -> *mut JPH_SoftBodyCreationSettings;
}
extern "C" {
    pub fn JPH_SoftBodyCreationSettings_Destroy(settings: *mut JPH_SoftBodyCreationSettings);
}
extern "C" {
    pub fn JPH_ConstraintSettings_Destroy(settings: *mut JPH_ConstraintSettings);
}
extern "C" {
    pub fn JPH_ConstraintSettings_GetEnabled(settings: *mut JPH_ConstraintSettings) -> bool;
}
extern "C" {
    pub fn JPH_FixedConstraintSettings_SetEnabled(
        settings: *mut JPH_ConstraintSettings,
        value: bool,
    );
}
extern "C" {
    pub fn JPH_ConstraintSettings_GetConstraintPriority(
        settings: *mut JPH_ConstraintSettings,
    ) -> u32;
}
extern "C" {
    pub fn JPH_FixedConstraintSettings_SetConstraintPriority(
        settings: *mut JPH_ConstraintSettings,
        value: u32,
    );
}
extern "C" {
    pub fn JPH_ConstraintSettings_GetNumVelocityStepsOverride(
        settings: *mut JPH_ConstraintSettings,
    ) -> u32;
}
extern "C" {
    pub fn JPH_ConstraintSettings_SetNumVelocityStepsOverride(
        settings: *mut JPH_ConstraintSettings,
        value: u32,
    );
}
extern "C" {
    pub fn JPH_ConstraintSettings_GetNumPositionStepsOverride(
        settings: *mut JPH_ConstraintSettings,
    ) -> u32;
}
extern "C" {
    pub fn JPH_ConstraintSettings_SetNumPositionStepsOverride(
        settings: *mut JPH_ConstraintSettings,
        value: u32,
    );
}
extern "C" {
    pub fn JPH_ConstraintSettings_GetDrawConstraintSize(
        settings: *mut JPH_ConstraintSettings,
    ) -> f32;
}
extern "C" {
    pub fn JPH_ConstraintSettings_SetDrawConstraintSize(
        settings: *mut JPH_ConstraintSettings,
        value: f32,
    );
}
extern "C" {
    pub fn JPH_ConstraintSettings_GetUserData(settings: *mut JPH_ConstraintSettings) -> u64;
}
extern "C" {
    pub fn JPH_ConstraintSettings_SetUserData(settings: *mut JPH_ConstraintSettings, value: u64);
}
extern "C" {
    pub fn JPH_Constraint_GetConstraintSettings(
        constraint: *mut JPH_Constraint,
    ) -> *mut JPH_ConstraintSettings;
}
extern "C" {
    pub fn JPH_Constraint_GetType(constraint: *const JPH_Constraint) -> JPH_ConstraintType;
}
extern "C" {
    pub fn JPH_Constraint_GetSubType(constraint: *const JPH_Constraint) -> JPH_ConstraintSubType;
}
extern "C" {
    pub fn JPH_Constraint_GetConstraintPriority(constraint: *const JPH_Constraint) -> u32;
}
extern "C" {
    pub fn JPH_Constraint_SetConstraintPriority(constraint: *mut JPH_Constraint, priority: u32);
}
extern "C" {
    pub fn JPH_Constraint_GetEnabled(constraint: *mut JPH_Constraint) -> bool;
}
extern "C" {
    pub fn JPH_Constraint_SetEnabled(constraint: *mut JPH_Constraint, enabled: bool);
}
extern "C" {
    pub fn JPH_Constraint_GetUserData(constraint: *const JPH_Constraint) -> u64;
}
extern "C" {
    pub fn JPH_Constraint_SetUserData(constraint: *mut JPH_Constraint, userData: u64);
}
extern "C" {
    pub fn JPH_Constraint_NotifyShapeChanged(
        constraint: *mut JPH_Constraint,
        bodyID: JPH_BodyID,
        deltaCOM: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_Constraint_Destroy(constraint: *mut JPH_Constraint);
}
extern "C" {
    pub fn JPH_FixedConstraintSettings_Create() -> *mut JPH_FixedConstraintSettings;
}
extern "C" {
    pub fn JPH_FixedConstraintSettings_GetSpace(
        settings: *mut JPH_FixedConstraintSettings,
    ) -> JPH_ConstraintSpace;
}
extern "C" {
    pub fn JPH_FixedConstraintSettings_SetSpace(
        settings: *mut JPH_FixedConstraintSettings,
        space: JPH_ConstraintSpace,
    );
}
extern "C" {
    pub fn JPH_FixedConstraintSettings_GetAutoDetectPoint(
        settings: *mut JPH_FixedConstraintSettings,
    ) -> bool;
}
extern "C" {
    pub fn JPH_FixedConstraintSettings_SetAutoDetectPoint(
        settings: *mut JPH_FixedConstraintSettings,
        value: bool,
    );
}
extern "C" {
    pub fn JPH_FixedConstraintSettings_GetPoint1(
        settings: *mut JPH_FixedConstraintSettings,
        result: *mut JPH_RVec3,
    );
}
extern "C" {
    pub fn JPH_FixedConstraintSettings_SetPoint1(
        settings: *mut JPH_FixedConstraintSettings,
        value: *const JPH_RVec3,
    );
}
extern "C" {
    pub fn JPH_FixedConstraintSettings_GetAxisX1(
        settings: *mut JPH_FixedConstraintSettings,
        result: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_FixedConstraintSettings_SetAxisX1(
        settings: *mut JPH_FixedConstraintSettings,
        value: *const JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_FixedConstraintSettings_GetAxisY1(
        settings: *mut JPH_FixedConstraintSettings,
        result: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_FixedConstraintSettings_SetAxisY1(
        settings: *mut JPH_FixedConstraintSettings,
        value: *const JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_FixedConstraintSettings_GetPoint2(
        settings: *mut JPH_FixedConstraintSettings,
        result: *mut JPH_RVec3,
    );
}
extern "C" {
    pub fn JPH_FixedConstraintSettings_SetPoint2(
        settings: *mut JPH_FixedConstraintSettings,
        value: *const JPH_RVec3,
    );
}
extern "C" {
    pub fn JPH_FixedConstraintSettings_GetAxisX2(
        settings: *mut JPH_FixedConstraintSettings,
        result: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_FixedConstraintSettings_SetAxisX2(
        settings: *mut JPH_FixedConstraintSettings,
        value: *const JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_FixedConstraintSettings_GetAxisY2(
        settings: *mut JPH_FixedConstraintSettings,
        result: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_FixedConstraintSettings_SetAxisY2(
        settings: *mut JPH_FixedConstraintSettings,
        value: *const JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_FixedConstraintSettings_CreateConstraint(
        settings: *mut JPH_FixedConstraintSettings,
        body1: *mut JPH_Body,
        body2: *mut JPH_Body,
    ) -> *mut JPH_FixedConstraint;
}
extern "C" {
    pub fn JPH_FixedConstraint_GetTotalLambdaPosition(
        constraint: *const JPH_FixedConstraint,
        result: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_FixedConstraint_GetTotalLambdaRotation(
        constraint: *const JPH_FixedConstraint,
        result: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_DistanceConstraintSettings_Create() -> *mut JPH_DistanceConstraintSettings;
}
extern "C" {
    pub fn JPH_DistanceConstraintSettings_GetSpace(
        settings: *mut JPH_DistanceConstraintSettings,
    ) -> JPH_ConstraintSpace;
}
extern "C" {
    pub fn JPH_DistanceConstraintSettings_SetSpace(
        settings: *mut JPH_DistanceConstraintSettings,
        space: JPH_ConstraintSpace,
    );
}
extern "C" {
    pub fn JPH_DistanceConstraintSettings_GetPoint1(
        settings: *mut JPH_DistanceConstraintSettings,
        result: *mut JPH_RVec3,
    );
}
extern "C" {
    pub fn JPH_DistanceConstraintSettings_SetPoint1(
        settings: *mut JPH_DistanceConstraintSettings,
        value: *const JPH_RVec3,
    );
}
extern "C" {
    pub fn JPH_DistanceConstraintSettings_GetPoint2(
        settings: *mut JPH_DistanceConstraintSettings,
        result: *mut JPH_RVec3,
    );
}
extern "C" {
    pub fn JPH_DistanceConstraintSettings_SetPoint2(
        settings: *mut JPH_DistanceConstraintSettings,
        value: *const JPH_RVec3,
    );
}
extern "C" {
    pub fn JPH_DistanceConstraintSettings_CreateConstraint(
        settings: *mut JPH_DistanceConstraintSettings,
        body1: *mut JPH_Body,
        body2: *mut JPH_Body,
    ) -> *mut JPH_DistanceConstraint;
}
extern "C" {
    pub fn JPH_DistanceConstraint_SetDistance(
        constraint: *mut JPH_DistanceConstraint,
        minDistance: f32,
        maxDistance: f32,
    );
}
extern "C" {
    pub fn JPH_DistanceConstraint_GetMinDistance(constraint: *mut JPH_DistanceConstraint) -> f32;
}
extern "C" {
    pub fn JPH_DistanceConstraint_GetMaxDistance(constraint: *mut JPH_DistanceConstraint) -> f32;
}
extern "C" {
    pub fn JPH_DistanceConstraint_GetLimitsSpringSettings(
        constraint: *mut JPH_DistanceConstraint,
        result: *mut JPH_SpringSettings,
    );
}
extern "C" {
    pub fn JPH_DistanceConstraint_SetLimitsSpringSettings(
        constraint: *mut JPH_DistanceConstraint,
        settings: *mut JPH_SpringSettings,
    );
}
extern "C" {
    pub fn JPH_DistanceConstraint_GetTotalLambdaPosition(
        constraint: *const JPH_DistanceConstraint,
    ) -> f32;
}
extern "C" {
    pub fn JPH_PointConstraintSettings_Create() -> *mut JPH_PointConstraintSettings;
}
extern "C" {
    pub fn JPH_PointConstraintSettings_GetSpace(
        settings: *mut JPH_PointConstraintSettings,
    ) -> JPH_ConstraintSpace;
}
extern "C" {
    pub fn JPH_PointConstraintSettings_SetSpace(
        settings: *mut JPH_PointConstraintSettings,
        space: JPH_ConstraintSpace,
    );
}
extern "C" {
    pub fn JPH_PointConstraintSettings_GetPoint1(
        settings: *mut JPH_PointConstraintSettings,
        result: *mut JPH_RVec3,
    );
}
extern "C" {
    pub fn JPH_PointConstraintSettings_SetPoint1(
        settings: *mut JPH_PointConstraintSettings,
        value: *const JPH_RVec3,
    );
}
extern "C" {
    pub fn JPH_PointConstraintSettings_GetPoint2(
        settings: *mut JPH_PointConstraintSettings,
        result: *mut JPH_RVec3,
    );
}
extern "C" {
    pub fn JPH_PointConstraintSettings_SetPoint2(
        settings: *mut JPH_PointConstraintSettings,
        value: *const JPH_RVec3,
    );
}
extern "C" {
    pub fn JPH_PointConstraintSettings_CreateConstraint(
        settings: *mut JPH_PointConstraintSettings,
        body1: *mut JPH_Body,
        body2: *mut JPH_Body,
    ) -> *mut JPH_PointConstraint;
}
extern "C" {
    pub fn JPH_PointConstraint_SetPoint1(
        constraint: *mut JPH_PointConstraint,
        space: JPH_ConstraintSpace,
        value: *mut JPH_RVec3,
    );
}
extern "C" {
    pub fn JPH_PointConstraint_SetPoint2(
        constraint: *mut JPH_PointConstraint,
        space: JPH_ConstraintSpace,
        value: *mut JPH_RVec3,
    );
}
extern "C" {
    pub fn JPH_PointConstraint_GetTotalLambdaPosition(
        constraint: *const JPH_PointConstraint,
        result: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_HingeConstraintSettings_Create() -> *mut JPH_HingeConstraintSettings;
}
extern "C" {
    pub fn JPH_HingeConstraintSettings_GetPoint1(
        settings: *mut JPH_HingeConstraintSettings,
        result: *mut JPH_RVec3,
    );
}
extern "C" {
    pub fn JPH_HingeConstraintSettings_SetPoint1(
        settings: *mut JPH_HingeConstraintSettings,
        value: *const JPH_RVec3,
    );
}
extern "C" {
    pub fn JPH_HingeConstraintSettings_GetPoint2(
        settings: *mut JPH_HingeConstraintSettings,
        result: *mut JPH_RVec3,
    );
}
extern "C" {
    pub fn JPH_HingeConstraintSettings_SetPoint2(
        settings: *mut JPH_HingeConstraintSettings,
        value: *const JPH_RVec3,
    );
}
extern "C" {
    pub fn JPH_HingeConstraintSettings_SetHingeAxis1(
        settings: *mut JPH_HingeConstraintSettings,
        value: *const JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_HingeConstraintSettings_GetHingeAxis1(
        settings: *mut JPH_HingeConstraintSettings,
        result: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_HingeConstraintSettings_SetNormalAxis1(
        settings: *mut JPH_HingeConstraintSettings,
        value: *const JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_HingeConstraintSettings_GetNormalAxis1(
        settings: *mut JPH_HingeConstraintSettings,
        result: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_HingeConstraintSettings_SetHingeAxis2(
        settings: *mut JPH_HingeConstraintSettings,
        value: *const JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_HingeConstraintSettings_GetHingeAxis2(
        settings: *mut JPH_HingeConstraintSettings,
        result: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_HingeConstraintSettings_SetNormalAxis2(
        settings: *mut JPH_HingeConstraintSettings,
        value: *const JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_HingeConstraintSettings_GetNormalAxis2(
        settings: *mut JPH_HingeConstraintSettings,
        result: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_HingeConstraintSettings_CreateConstraint(
        settings: *mut JPH_HingeConstraintSettings,
        body1: *mut JPH_Body,
        body2: *mut JPH_Body,
    ) -> *mut JPH_HingeConstraint;
}
extern "C" {
    pub fn JPH_HingeConstraint_GetSettings(
        constraint: *mut JPH_HingeConstraint,
    ) -> *mut JPH_HingeConstraintSettings;
}
extern "C" {
    pub fn JPH_HingeConstraint_GetCurrentAngle(constraint: *mut JPH_HingeConstraint) -> f32;
}
extern "C" {
    pub fn JPH_HingeConstraint_SetMaxFrictionTorque(
        constraint: *mut JPH_HingeConstraint,
        frictionTorque: f32,
    );
}
extern "C" {
    pub fn JPH_HingeConstraint_GetMaxFrictionTorque(constraint: *mut JPH_HingeConstraint) -> f32;
}
extern "C" {
    pub fn JPH_HingeConstraint_SetMotorSettings(
        constraint: *mut JPH_HingeConstraint,
        settings: *mut JPH_MotorSettings,
    );
}
extern "C" {
    pub fn JPH_HingeConstraint_GetMotorSettings(
        constraint: *mut JPH_HingeConstraint,
        result: *mut JPH_MotorSettings,
    );
}
extern "C" {
    pub fn JPH_HingeConstraint_SetMotorState(
        constraint: *mut JPH_HingeConstraint,
        state: JPH_MotorState,
    );
}
extern "C" {
    pub fn JPH_HingeConstraint_GetMotorState(
        constraint: *mut JPH_HingeConstraint,
    ) -> JPH_MotorState;
}
extern "C" {
    pub fn JPH_HingeConstraint_SetTargetAngularVelocity(
        constraint: *mut JPH_HingeConstraint,
        angularVelocity: f32,
    );
}
extern "C" {
    pub fn JPH_HingeConstraint_GetTargetAngularVelocity(
        constraint: *mut JPH_HingeConstraint,
    ) -> f32;
}
extern "C" {
    pub fn JPH_HingeConstraint_SetTargetAngle(constraint: *mut JPH_HingeConstraint, angle: f32);
}
extern "C" {
    pub fn JPH_HingeConstraint_GetTargetAngle(constraint: *mut JPH_HingeConstraint) -> f32;
}
extern "C" {
    pub fn JPH_HingeConstraint_SetLimits(
        constraint: *mut JPH_HingeConstraint,
        inLimitsMin: f32,
        inLimitsMax: f32,
    );
}
extern "C" {
    pub fn JPH_HingeConstraint_GetLimitsMin(constraint: *mut JPH_HingeConstraint) -> f32;
}
extern "C" {
    pub fn JPH_HingeConstraint_GetLimitsMax(constraint: *mut JPH_HingeConstraint) -> f32;
}
extern "C" {
    pub fn JPH_HingeConstraint_HasLimits(constraint: *mut JPH_HingeConstraint) -> bool;
}
extern "C" {
    pub fn JPH_HingeConstraint_GetLimitsSpringSettings(
        constraint: *mut JPH_HingeConstraint,
        result: *mut JPH_SpringSettings,
    );
}
extern "C" {
    pub fn JPH_HingeConstraint_SetLimitsSpringSettings(
        constraint: *mut JPH_HingeConstraint,
        settings: *mut JPH_SpringSettings,
    );
}
extern "C" {
    pub fn JPH_HingeConstraint_GetTotalLambdaPosition(
        constraint: *const JPH_HingeConstraint,
        result: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_HingeConstraint_GetTotalLambdaRotation(
        constraint: *const JPH_HingeConstraint,
        x: *mut f32,
        y: *mut f32,
    );
}
extern "C" {
    pub fn JPH_HingeConstraint_GetTotalLambdaRotationLimits(
        constraint: *const JPH_HingeConstraint,
    ) -> f32;
}
extern "C" {
    pub fn JPH_HingeConstraint_GetTotalLambdaMotor(constraint: *const JPH_HingeConstraint) -> f32;
}
extern "C" {
    pub fn JPH_SliderConstraintSettings_Create() -> *mut JPH_SliderConstraintSettings;
}
extern "C" {
    pub fn JPH_SliderConstraintSettings_SetSliderAxis(
        settings: *mut JPH_SliderConstraintSettings,
        axis: *const JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_SliderConstraintSettings_GetAutoDetectPoint(
        settings: *mut JPH_SliderConstraintSettings,
    ) -> bool;
}
extern "C" {
    pub fn JPH_SliderConstraintSettings_SetAutoDetectPoint(
        settings: *mut JPH_SliderConstraintSettings,
        value: bool,
    );
}
extern "C" {
    pub fn JPH_SliderConstraintSettings_GetPoint1(
        settings: *mut JPH_SliderConstraintSettings,
        result: *mut JPH_RVec3,
    );
}
extern "C" {
    pub fn JPH_SliderConstraintSettings_SetPoint1(
        settings: *mut JPH_SliderConstraintSettings,
        value: *const JPH_RVec3,
    );
}
extern "C" {
    pub fn JPH_SliderConstraintSettings_GetPoint2(
        settings: *mut JPH_SliderConstraintSettings,
        result: *mut JPH_RVec3,
    );
}
extern "C" {
    pub fn JPH_SliderConstraintSettings_SetPoint2(
        settings: *mut JPH_SliderConstraintSettings,
        value: *const JPH_RVec3,
    );
}
extern "C" {
    pub fn JPH_SliderConstraintSettings_SetSliderAxis1(
        settings: *mut JPH_SliderConstraintSettings,
        value: *const JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_SliderConstraintSettings_GetSliderAxis1(
        settings: *mut JPH_SliderConstraintSettings,
        result: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_SliderConstraintSettings_SetNormalAxis1(
        settings: *mut JPH_SliderConstraintSettings,
        value: *const JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_SliderConstraintSettings_GetNormalAxis1(
        settings: *mut JPH_SliderConstraintSettings,
        result: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_SliderConstraintSettings_SetSliderAxis2(
        settings: *mut JPH_SliderConstraintSettings,
        value: *const JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_SliderConstraintSettings_GetSliderAxis2(
        settings: *mut JPH_SliderConstraintSettings,
        result: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_SliderConstraintSettings_SetNormalAxis2(
        settings: *mut JPH_SliderConstraintSettings,
        value: *const JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_SliderConstraintSettings_GetNormalAxis2(
        settings: *mut JPH_SliderConstraintSettings,
        result: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_SliderConstraintSettings_CreateConstraint(
        settings: *mut JPH_SliderConstraintSettings,
        body1: *mut JPH_Body,
        body2: *mut JPH_Body,
    ) -> *mut JPH_SliderConstraint;
}
extern "C" {
    pub fn JPH_SliderConstraint_GetSettings(
        constraint: *mut JPH_SliderConstraint,
    ) -> *mut JPH_SliderConstraintSettings;
}
extern "C" {
    pub fn JPH_SliderConstraint_GetCurrentPosition(constraint: *mut JPH_SliderConstraint) -> f32;
}
extern "C" {
    pub fn JPH_SliderConstraint_SetMaxFrictionForce(
        constraint: *mut JPH_SliderConstraint,
        frictionForce: f32,
    );
}
extern "C" {
    pub fn JPH_SliderConstraint_GetMaxFrictionForce(constraint: *mut JPH_SliderConstraint) -> f32;
}
extern "C" {
    pub fn JPH_SliderConstraint_SetMotorSettings(
        constraint: *mut JPH_SliderConstraint,
        settings: *mut JPH_MotorSettings,
    );
}
extern "C" {
    pub fn JPH_SliderConstraint_GetMotorSettings(
        constraint: *mut JPH_SliderConstraint,
        result: *mut JPH_MotorSettings,
    );
}
extern "C" {
    pub fn JPH_SliderConstraint_SetMotorState(
        constraint: *mut JPH_SliderConstraint,
        state: JPH_MotorState,
    );
}
extern "C" {
    pub fn JPH_SliderConstraint_GetMotorState(
        constraint: *mut JPH_SliderConstraint,
    ) -> JPH_MotorState;
}
extern "C" {
    pub fn JPH_SliderConstraint_SetTargetVelocity(
        constraint: *mut JPH_SliderConstraint,
        velocity: f32,
    );
}
extern "C" {
    pub fn JPH_SliderConstraint_GetTargetVelocity(constraint: *mut JPH_SliderConstraint) -> f32;
}
extern "C" {
    pub fn JPH_SliderConstraint_SetTargetPosition(
        constraint: *mut JPH_SliderConstraint,
        position: f32,
    );
}
extern "C" {
    pub fn JPH_SliderConstraint_GetTargetPosition(constraint: *mut JPH_SliderConstraint) -> f32;
}
extern "C" {
    pub fn JPH_SliderConstraint_SetLimits(
        constraint: *mut JPH_SliderConstraint,
        inLimitsMin: f32,
        inLimitsMax: f32,
    );
}
extern "C" {
    pub fn JPH_SliderConstraint_GetLimitsMin(constraint: *mut JPH_SliderConstraint) -> f32;
}
extern "C" {
    pub fn JPH_SliderConstraint_GetLimitsMax(constraint: *mut JPH_SliderConstraint) -> f32;
}
extern "C" {
    pub fn JPH_SliderConstraint_HasLimits(constraint: *mut JPH_SliderConstraint) -> bool;
}
extern "C" {
    pub fn JPH_SliderConstraint_GetLimitsSpringSettings(
        constraint: *mut JPH_SliderConstraint,
        result: *mut JPH_SpringSettings,
    );
}
extern "C" {
    pub fn JPH_SliderConstraint_SetLimitsSpringSettings(
        constraint: *mut JPH_SliderConstraint,
        settings: *mut JPH_SpringSettings,
    );
}
extern "C" {
    pub fn JPH_SliderConstraint_GetTotalLambdaPosition(
        constraint: *const JPH_SliderConstraint,
        x: *mut f32,
        y: *mut f32,
    );
}
extern "C" {
    pub fn JPH_SliderConstraint_GetTotalLambdaPositionLimits(
        constraint: *const JPH_SliderConstraint,
    ) -> f32;
}
extern "C" {
    pub fn JPH_SliderConstraint_GetTotalLambdaRotation(
        constraint: *const JPH_SliderConstraint,
        result: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_SliderConstraint_GetTotalLambdaMotor(constraint: *const JPH_SliderConstraint)
        -> f32;
}
extern "C" {
    pub fn JPH_ConeConstraintSettings_Create() -> *mut JPH_ConeConstraintSettings;
}
extern "C" {
    pub fn JPH_ConeConstraintSettings_GetPoint1(
        settings: *mut JPH_ConeConstraintSettings,
        result: *mut JPH_RVec3,
    );
}
extern "C" {
    pub fn JPH_ConeConstraintSettings_SetPoint1(
        settings: *mut JPH_ConeConstraintSettings,
        value: *const JPH_RVec3,
    );
}
extern "C" {
    pub fn JPH_ConeConstraintSettings_GetPoint2(
        settings: *mut JPH_ConeConstraintSettings,
        result: *mut JPH_RVec3,
    );
}
extern "C" {
    pub fn JPH_ConeConstraintSettings_SetPoint2(
        settings: *mut JPH_ConeConstraintSettings,
        value: *const JPH_RVec3,
    );
}
extern "C" {
    pub fn JPH_ConeConstraintSettings_SetTwistAxis1(
        settings: *mut JPH_ConeConstraintSettings,
        value: *const JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_ConeConstraintSettings_GetTwistAxis1(
        settings: *mut JPH_ConeConstraintSettings,
        result: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_ConeConstraintSettings_SetTwistAxis2(
        settings: *mut JPH_ConeConstraintSettings,
        value: *const JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_ConeConstraintSettings_GetTwistAxis2(
        settings: *mut JPH_ConeConstraintSettings,
        result: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_ConeConstraintSettings_SetHalfConeAngle(
        settings: *mut JPH_ConeConstraintSettings,
        halfConeAngle: f32,
    );
}
extern "C" {
    pub fn JPH_ConeConstraintSettings_GetHalfConeAngle(
        settings: *mut JPH_ConeConstraintSettings,
    ) -> f32;
}
extern "C" {
    pub fn JPH_ConeConstraintSettings_CreateConstraint(
        settings: *mut JPH_ConeConstraintSettings,
        body1: *mut JPH_Body,
        body2: *mut JPH_Body,
    ) -> *mut JPH_ConeConstraint;
}
extern "C" {
    pub fn JPH_ConeConstraint_SetHalfConeAngle(
        constraint: *mut JPH_ConeConstraint,
        halfConeAngle: f32,
    );
}
extern "C" {
    pub fn JPH_ConeConstraint_GetCosHalfConeAngle(constraint: *const JPH_ConeConstraint) -> f32;
}
extern "C" {
    pub fn JPH_ConeConstraint_GetTotalLambdaPosition(
        constraint: *const JPH_ConeConstraint,
        result: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_ConeConstraint_GetTotalLambdaRotation(constraint: *const JPH_ConeConstraint) -> f32;
}
extern "C" {
    pub fn JPH_SwingTwistConstraintSettings_Create() -> *mut JPH_SwingTwistConstraintSettings;
}
extern "C" {
    pub fn JPH_SwingTwistConstraintSettings_CreateConstraint(
        settings: *mut JPH_SwingTwistConstraintSettings,
        body1: *mut JPH_Body,
        body2: *mut JPH_Body,
    ) -> *mut JPH_SwingTwistConstraint;
}
extern "C" {
    pub fn JPH_SwingTwistConstraint_GetNormalHalfConeAngle(
        constraint: *mut JPH_SwingTwistConstraint,
    ) -> f32;
}
extern "C" {
    pub fn JPH_SwingTwistConstraint_GetTotalLambdaPosition(
        constraint: *const JPH_SwingTwistConstraint,
        result: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_SwingTwistConstraint_GetTotalLambdaTwist(
        constraint: *const JPH_SwingTwistConstraint,
    ) -> f32;
}
extern "C" {
    pub fn JPH_SwingTwistConstraint_GetTotalLambdaSwingY(
        constraint: *const JPH_SwingTwistConstraint,
    ) -> f32;
}
extern "C" {
    pub fn JPH_SwingTwistConstraint_GetTotalLambdaSwingZ(
        constraint: *const JPH_SwingTwistConstraint,
    ) -> f32;
}
extern "C" {
    pub fn JPH_SwingTwistConstraint_GetTotalLambdaMotor(
        constraint: *const JPH_SwingTwistConstraint,
        result: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_SixDOFConstraintSettings_Create() -> *mut JPH_SixDOFConstraintSettings;
}
extern "C" {
    pub fn JPH_SixDOFConstraintSettings_CreateConstraint(
        settings: *mut JPH_SixDOFConstraintSettings,
        body1: *mut JPH_Body,
        body2: *mut JPH_Body,
    ) -> *mut JPH_SixDOFConstraint;
}
extern "C" {
    pub fn JPH_SixDOFConstraint_GetLimitsMin(
        constraint: *mut JPH_SixDOFConstraint,
        axis: JPH_SixDOFConstraintAxis,
    ) -> f32;
}
extern "C" {
    pub fn JPH_SixDOFConstraint_GetLimitsMax(
        constraint: *mut JPH_SixDOFConstraint,
        axis: JPH_SixDOFConstraintAxis,
    ) -> f32;
}
extern "C" {
    pub fn JPH_SixDOFConstraint_GetTotalLambdaPosition(
        constraint: *const JPH_SixDOFConstraint,
        result: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_SixDOFConstraint_GetTotalLambdaRotation(
        constraint: *const JPH_SixDOFConstraint,
        result: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_SixDOFConstraint_GetTotalLambdaMotorTranslation(
        constraint: *const JPH_SixDOFConstraint,
        result: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_SixDOFConstraint_GetTotalLambdaMotorRotation(
        constraint: *const JPH_SixDOFConstraint,
        result: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_TwoBodyConstraint_GetBody1(constraint: *mut JPH_TwoBodyConstraint) -> *mut JPH_Body;
}
extern "C" {
    pub fn JPH_TwoBodyConstraint_GetBody2(constraint: *mut JPH_TwoBodyConstraint) -> *mut JPH_Body;
}
extern "C" {
    pub fn JPH_TwoBodyConstraint_GetConstraintToBody1Matrix(
        constraint: *mut JPH_TwoBodyConstraint,
        result: *mut JPH_Matrix4x4,
    );
}
extern "C" {
    pub fn JPH_TwoBodyConstraint_GetConstraintToBody2Matrix(
        constraint: *mut JPH_TwoBodyConstraint,
        result: *mut JPH_Matrix4x4,
    );
}
extern "C" {
    pub fn JPH_BodyInterface_DestroyBody(interface: *mut JPH_BodyInterface, bodyID: JPH_BodyID);
}
extern "C" {
    pub fn JPH_BodyInterface_CreateAndAddBody(
        interface: *mut JPH_BodyInterface,
        settings: *const JPH_BodyCreationSettings,
        activationMode: JPH_Activation,
    ) -> JPH_BodyID;
}
extern "C" {
    pub fn JPH_BodyInterface_CreateBody(
        interface: *mut JPH_BodyInterface,
        settings: *const JPH_BodyCreationSettings,
    ) -> *mut JPH_Body;
}
extern "C" {
    pub fn JPH_BodyInterface_CreateBodyWithID(
        interface: *mut JPH_BodyInterface,
        bodyID: JPH_BodyID,
        settings: *const JPH_BodyCreationSettings,
    ) -> *mut JPH_Body;
}
extern "C" {
    pub fn JPH_BodyInterface_CreateBodyWithoutID(
        interface: *mut JPH_BodyInterface,
        settings: *const JPH_BodyCreationSettings,
    ) -> *mut JPH_Body;
}
extern "C" {
    pub fn JPH_BodyInterface_DestroyBodyWithoutID(
        interface: *mut JPH_BodyInterface,
        body: *mut JPH_Body,
    );
}
extern "C" {
    pub fn JPH_BodyInterface_AssignBodyID(
        interface: *mut JPH_BodyInterface,
        body: *mut JPH_Body,
    ) -> bool;
}
extern "C" {
    pub fn JPH_BodyInterface_AssignBodyID2(
        interface: *mut JPH_BodyInterface,
        body: *mut JPH_Body,
        bodyID: JPH_BodyID,
    ) -> bool;
}
extern "C" {
    pub fn JPH_BodyInterface_UnassignBodyID(
        interface: *mut JPH_BodyInterface,
        bodyID: JPH_BodyID,
    ) -> *mut JPH_Body;
}
extern "C" {
    pub fn JPH_BodyInterface_CreateSoftBody(
        interface: *mut JPH_BodyInterface,
        settings: *const JPH_SoftBodyCreationSettings,
    ) -> *mut JPH_Body;
}
extern "C" {
    pub fn JPH_BodyInterface_CreateSoftBodyWithID(
        interface: *mut JPH_BodyInterface,
        bodyID: JPH_BodyID,
        settings: *const JPH_SoftBodyCreationSettings,
    ) -> *mut JPH_Body;
}
extern "C" {
    pub fn JPH_BodyInterface_CreateSoftBodyWithoutID(
        interface: *mut JPH_BodyInterface,
        settings: *const JPH_SoftBodyCreationSettings,
    ) -> *mut JPH_Body;
}
extern "C" {
    pub fn JPH_BodyInterface_CreateAndAddSoftBody(
        interface: *mut JPH_BodyInterface,
        settings: *const JPH_SoftBodyCreationSettings,
        activationMode: JPH_Activation,
    ) -> JPH_BodyID;
}
extern "C" {
    pub fn JPH_BodyInterface_AddBody(
        interface: *mut JPH_BodyInterface,
        bodyID: JPH_BodyID,
        activationMode: JPH_Activation,
    );
}
extern "C" {
    pub fn JPH_BodyInterface_RemoveBody(interface: *mut JPH_BodyInterface, bodyID: JPH_BodyID);
}
extern "C" {
    pub fn JPH_BodyInterface_RemoveAndDestroyBody(
        interface: *mut JPH_BodyInterface,
        bodyID: JPH_BodyID,
    );
}
extern "C" {
    pub fn JPH_BodyInterface_IsActive(
        interface: *mut JPH_BodyInterface,
        bodyID: JPH_BodyID,
    ) -> bool;
}
extern "C" {
    pub fn JPH_BodyInterface_IsAdded(interface: *mut JPH_BodyInterface, bodyID: JPH_BodyID)
        -> bool;
}
extern "C" {
    pub fn JPH_BodyInterface_GetBodyType(
        interface: *mut JPH_BodyInterface,
        bodyID: JPH_BodyID,
    ) -> JPH_BodyType;
}
extern "C" {
    pub fn JPH_BodyInterface_SetLinearVelocity(
        interface: *mut JPH_BodyInterface,
        bodyID: JPH_BodyID,
        velocity: *const JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_BodyInterface_GetLinearVelocity(
        interface: *mut JPH_BodyInterface,
        bodyID: JPH_BodyID,
        velocity: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_BodyInterface_GetCenterOfMassPosition(
        interface: *mut JPH_BodyInterface,
        bodyID: JPH_BodyID,
        position: *mut JPH_RVec3,
    );
}
extern "C" {
    pub fn JPH_BodyInterface_GetMotionType(
        interface: *mut JPH_BodyInterface,
        bodyID: JPH_BodyID,
    ) -> JPH_MotionType;
}
extern "C" {
    pub fn JPH_BodyInterface_SetMotionType(
        interface: *mut JPH_BodyInterface,
        bodyID: JPH_BodyID,
        motionType: JPH_MotionType,
        activationMode: JPH_Activation,
    );
}
extern "C" {
    pub fn JPH_BodyInterface_GetRestitution(
        interface: *const JPH_BodyInterface,
        bodyID: JPH_BodyID,
    ) -> f32;
}
extern "C" {
    pub fn JPH_BodyInterface_SetRestitution(
        interface: *mut JPH_BodyInterface,
        bodyID: JPH_BodyID,
        restitution: f32,
    );
}
extern "C" {
    pub fn JPH_BodyInterface_GetFriction(
        interface: *const JPH_BodyInterface,
        bodyID: JPH_BodyID,
    ) -> f32;
}
extern "C" {
    pub fn JPH_BodyInterface_SetFriction(
        interface: *mut JPH_BodyInterface,
        bodyID: JPH_BodyID,
        friction: f32,
    );
}
extern "C" {
    pub fn JPH_BodyInterface_SetPosition(
        interface: *mut JPH_BodyInterface,
        bodyId: JPH_BodyID,
        position: *mut JPH_RVec3,
        activationMode: JPH_Activation,
    );
}
extern "C" {
    pub fn JPH_BodyInterface_GetPosition(
        interface: *mut JPH_BodyInterface,
        bodyId: JPH_BodyID,
        result: *mut JPH_RVec3,
    );
}
extern "C" {
    pub fn JPH_BodyInterface_SetRotation(
        interface: *mut JPH_BodyInterface,
        bodyId: JPH_BodyID,
        rotation: *mut JPH_Quat,
        activationMode: JPH_Activation,
    );
}
extern "C" {
    pub fn JPH_BodyInterface_GetRotation(
        interface: *mut JPH_BodyInterface,
        bodyId: JPH_BodyID,
        result: *mut JPH_Quat,
    );
}
extern "C" {
    pub fn JPH_BodyInterface_SetPositionAndRotation(
        interface: *mut JPH_BodyInterface,
        bodyId: JPH_BodyID,
        position: *mut JPH_RVec3,
        rotation: *mut JPH_Quat,
        activationMode: JPH_Activation,
    );
}
extern "C" {
    pub fn JPH_BodyInterface_SetPositionAndRotationWhenChanged(
        interface: *mut JPH_BodyInterface,
        bodyId: JPH_BodyID,
        position: *mut JPH_RVec3,
        rotation: *mut JPH_Quat,
        activationMode: JPH_Activation,
    );
}
extern "C" {
    pub fn JPH_BodyInterface_GetPositionAndRotation(
        interface: *mut JPH_BodyInterface,
        bodyId: JPH_BodyID,
        position: *mut JPH_RVec3,
        rotation: *mut JPH_Quat,
    );
}
extern "C" {
    pub fn JPH_BodyInterface_SetPositionRotationAndVelocity(
        interface: *mut JPH_BodyInterface,
        bodyId: JPH_BodyID,
        position: *mut JPH_RVec3,
        rotation: *mut JPH_Quat,
        linearVelocity: *mut JPH_Vec3,
        angularVelocity: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_BodyInterface_GetShape(
        interface: *mut JPH_BodyInterface,
        bodyId: JPH_BodyID,
    ) -> *const JPH_Shape;
}
extern "C" {
    pub fn JPH_BodyInterface_SetShape(
        interface: *mut JPH_BodyInterface,
        bodyId: JPH_BodyID,
        shape: *const JPH_Shape,
        updateMassProperties: bool,
        activationMode: JPH_Activation,
    );
}
extern "C" {
    pub fn JPH_BodyInterface_NotifyShapeChanged(
        interface: *mut JPH_BodyInterface,
        bodyId: JPH_BodyID,
        previousCenterOfMass: *mut JPH_Vec3,
        updateMassProperties: bool,
        activationMode: JPH_Activation,
    );
}
extern "C" {
    pub fn JPH_BodyInterface_ActivateBody(interface: *mut JPH_BodyInterface, bodyId: JPH_BodyID);
}
extern "C" {
    pub fn JPH_BodyInterface_DeactivateBody(interface: *mut JPH_BodyInterface, bodyId: JPH_BodyID);
}
extern "C" {
    pub fn JPH_BodyInterface_GetObjectLayer(
        interface: *mut JPH_BodyInterface,
        bodyId: JPH_BodyID,
    ) -> JPH_ObjectLayer;
}
extern "C" {
    pub fn JPH_BodyInterface_SetObjectLayer(
        interface: *mut JPH_BodyInterface,
        bodyId: JPH_BodyID,
        layer: JPH_ObjectLayer,
    );
}
extern "C" {
    pub fn JPH_BodyInterface_GetWorldTransform(
        interface: *mut JPH_BodyInterface,
        bodyId: JPH_BodyID,
        result: *mut JPH_RMatrix4x4,
    );
}
extern "C" {
    pub fn JPH_BodyInterface_GetCenterOfMassTransform(
        interface: *mut JPH_BodyInterface,
        bodyId: JPH_BodyID,
        result: *mut JPH_RMatrix4x4,
    );
}
extern "C" {
    pub fn JPH_BodyInterface_MoveKinematic(
        interface: *mut JPH_BodyInterface,
        bodyId: JPH_BodyID,
        targetPosition: *mut JPH_RVec3,
        targetRotation: *mut JPH_Quat,
        deltaTime: f32,
    );
}
extern "C" {
    pub fn JPH_BodyInterface_ApplyBuoyancyImpulse(
        interface: *mut JPH_BodyInterface,
        bodyId: JPH_BodyID,
        surfacePosition: *const JPH_RVec3,
        surfaceNormal: *const JPH_Vec3,
        buoyancy: f32,
        linearDrag: f32,
        angularDrag: f32,
        fluidVelocity: *const JPH_Vec3,
        gravity: *const JPH_Vec3,
        deltaTime: f32,
    ) -> bool;
}
extern "C" {
    pub fn JPH_BodyInterface_SetLinearAndAngularVelocity(
        interface: *mut JPH_BodyInterface,
        bodyId: JPH_BodyID,
        linearVelocity: *mut JPH_Vec3,
        angularVelocity: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_BodyInterface_GetLinearAndAngularVelocity(
        interface: *mut JPH_BodyInterface,
        bodyId: JPH_BodyID,
        linearVelocity: *mut JPH_Vec3,
        angularVelocity: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_BodyInterface_AddLinearVelocity(
        interface: *mut JPH_BodyInterface,
        bodyId: JPH_BodyID,
        linearVelocity: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_BodyInterface_AddLinearAndAngularVelocity(
        interface: *mut JPH_BodyInterface,
        bodyId: JPH_BodyID,
        linearVelocity: *mut JPH_Vec3,
        angularVelocity: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_BodyInterface_SetAngularVelocity(
        interface: *mut JPH_BodyInterface,
        bodyId: JPH_BodyID,
        angularVelocity: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_BodyInterface_GetAngularVelocity(
        interface: *mut JPH_BodyInterface,
        bodyId: JPH_BodyID,
        angularVelocity: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_BodyInterface_GetPointVelocity(
        interface: *mut JPH_BodyInterface,
        bodyId: JPH_BodyID,
        point: *mut JPH_RVec3,
        velocity: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_BodyInterface_AddForce(
        interface: *mut JPH_BodyInterface,
        bodyId: JPH_BodyID,
        force: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_BodyInterface_AddForce2(
        interface: *mut JPH_BodyInterface,
        bodyId: JPH_BodyID,
        force: *mut JPH_Vec3,
        point: *mut JPH_RVec3,
    );
}
extern "C" {
    pub fn JPH_BodyInterface_AddTorque(
        interface: *mut JPH_BodyInterface,
        bodyId: JPH_BodyID,
        torque: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_BodyInterface_AddForceAndTorque(
        interface: *mut JPH_BodyInterface,
        bodyId: JPH_BodyID,
        force: *mut JPH_Vec3,
        torque: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_BodyInterface_AddImpulse(
        interface: *mut JPH_BodyInterface,
        bodyId: JPH_BodyID,
        impulse: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_BodyInterface_AddImpulse2(
        interface: *mut JPH_BodyInterface,
        bodyId: JPH_BodyID,
        impulse: *mut JPH_Vec3,
        point: *mut JPH_RVec3,
    );
}
extern "C" {
    pub fn JPH_BodyInterface_AddAngularImpulse(
        interface: *mut JPH_BodyInterface,
        bodyId: JPH_BodyID,
        angularImpulse: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_BodyInterface_SetMotionQuality(
        interface: *mut JPH_BodyInterface,
        bodyId: JPH_BodyID,
        quality: JPH_MotionQuality,
    );
}
extern "C" {
    pub fn JPH_BodyInterface_GetMotionQuality(
        interface: *mut JPH_BodyInterface,
        bodyId: JPH_BodyID,
    ) -> JPH_MotionQuality;
}
extern "C" {
    pub fn JPH_BodyInterface_GetInverseInertia(
        interface: *mut JPH_BodyInterface,
        bodyId: JPH_BodyID,
        result: *mut JPH_Matrix4x4,
    );
}
extern "C" {
    pub fn JPH_BodyInterface_SetGravityFactor(
        interface: *mut JPH_BodyInterface,
        bodyId: JPH_BodyID,
        gravityFactor: f32,
    );
}
extern "C" {
    pub fn JPH_BodyInterface_GetGravityFactor(
        interface: *mut JPH_BodyInterface,
        bodyId: JPH_BodyID,
    ) -> f32;
}
extern "C" {
    pub fn JPH_BodyInterface_InvalidateContactCache(
        interface: *mut JPH_BodyInterface,
        bodyId: JPH_BodyID,
    );
}
extern "C" {
    pub fn JPH_BodyInterface_SetUserData(
        interface: *mut JPH_BodyInterface,
        bodyId: JPH_BodyID,
        inUserData: u64,
    );
}
extern "C" {
    pub fn JPH_BodyInterface_GetUserData(
        interface: *mut JPH_BodyInterface,
        bodyId: JPH_BodyID,
    ) -> u64;
}
extern "C" {
    pub fn JPH_BodyLockInterface_LockRead(
        lockInterface: *const JPH_BodyLockInterface,
        bodyID: JPH_BodyID,
        outLock: *mut JPH_BodyLockRead,
    );
}
extern "C" {
    pub fn JPH_BodyLockInterface_UnlockRead(
        lockInterface: *const JPH_BodyLockInterface,
        ioLock: *mut JPH_BodyLockRead,
    );
}
extern "C" {
    pub fn JPH_BodyLockInterface_LockWrite(
        lockInterface: *const JPH_BodyLockInterface,
        bodyID: JPH_BodyID,
        outLock: *mut JPH_BodyLockWrite,
    );
}
extern "C" {
    pub fn JPH_BodyLockInterface_UnlockWrite(
        lockInterface: *const JPH_BodyLockInterface,
        ioLock: *mut JPH_BodyLockWrite,
    );
}
extern "C" {
    pub fn JPH_MotionProperties_GetAllowedDOFs(
        properties: *const JPH_MotionProperties,
    ) -> JPH_AllowedDOFs;
}
extern "C" {
    pub fn JPH_MotionProperties_SetLinearDamping(
        properties: *mut JPH_MotionProperties,
        damping: f32,
    );
}
extern "C" {
    pub fn JPH_MotionProperties_GetLinearDamping(properties: *const JPH_MotionProperties) -> f32;
}
extern "C" {
    pub fn JPH_MotionProperties_SetAngularDamping(
        properties: *mut JPH_MotionProperties,
        damping: f32,
    );
}
extern "C" {
    pub fn JPH_MotionProperties_GetAngularDamping(properties: *const JPH_MotionProperties) -> f32;
}
extern "C" {
    pub fn JPH_MotionProperties_SetMassProperties(
        properties: *mut JPH_MotionProperties,
        allowedDOFs: JPH_AllowedDOFs,
        massProperties: *const JPH_MassProperties,
    );
}
extern "C" {
    pub fn JPH_MotionProperties_GetInverseMassUnchecked(
        properties: *mut JPH_MotionProperties,
    ) -> f32;
}
extern "C" {
    pub fn JPH_MotionProperties_SetInverseMass(
        properties: *mut JPH_MotionProperties,
        inverseMass: f32,
    );
}
extern "C" {
    pub fn JPH_MotionProperties_GetInverseInertiaDiagonal(
        properties: *mut JPH_MotionProperties,
        result: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_MotionProperties_GetInertiaRotation(
        properties: *mut JPH_MotionProperties,
        result: *mut JPH_Quat,
    );
}
extern "C" {
    pub fn JPH_MotionProperties_SetInverseInertia(
        properties: *mut JPH_MotionProperties,
        diagonal: *mut JPH_Vec3,
        rot: *mut JPH_Quat,
    );
}
extern "C" {
    pub fn JPH_MassProperties_DecomposePrincipalMomentsOfInertia(
        properties: *mut JPH_MassProperties,
        rotation: *mut JPH_Matrix4x4,
        diagonal: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_MassProperties_ScaleToMass(properties: *mut JPH_MassProperties, mass: f32);
}
extern "C" {
    pub fn JPH_MassProperties_GetEquivalentSolidBoxSize(
        mass: f32,
        inertiaDiagonal: *const JPH_Vec3,
        result: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_CollideShapeSettings_Init(settings: *mut JPH_CollideShapeSettings);
}
extern "C" {
    pub fn JPH_ShapeCastSettings_Init(settings: *mut JPH_ShapeCastSettings);
}
extern "C" {
    pub fn JPH_BroadPhaseQuery_CastRay(
        query: *const JPH_BroadPhaseQuery,
        origin: *const JPH_Vec3,
        direction: *const JPH_Vec3,
        callback: JPH_RayCastBodyCollector,
        userData: *mut ::std::os::raw::c_void,
        broadPhaseLayerFilter: *mut JPH_BroadPhaseLayerFilter,
        objectLayerFilter: *mut JPH_ObjectLayerFilter,
    ) -> bool;
}
extern "C" {
    pub fn JPH_BroadPhaseQuery_CastRay2(
        query: *const JPH_BroadPhaseQuery,
        origin: *const JPH_Vec3,
        direction: *const JPH_Vec3,
        collectorType: JPH_CollisionCollectorType,
        callback: JPH_RayCastBodyResultCallback,
        userData: *mut ::std::os::raw::c_void,
        broadPhaseLayerFilter: *mut JPH_BroadPhaseLayerFilter,
        objectLayerFilter: *mut JPH_ObjectLayerFilter,
    ) -> bool;
}
extern "C" {
    pub fn JPH_BroadPhaseQuery_CollideAABox(
        query: *const JPH_BroadPhaseQuery,
        box_: *const JPH_AABox,
        callback: JPH_CollideShapeBodyCollector,
        userData: *mut ::std::os::raw::c_void,
        broadPhaseLayerFilter: *mut JPH_BroadPhaseLayerFilter,
        objectLayerFilter: *mut JPH_ObjectLayerFilter,
    ) -> bool;
}
extern "C" {
    pub fn JPH_BroadPhaseQuery_CollideSphere(
        query: *const JPH_BroadPhaseQuery,
        center: *const JPH_Vec3,
        radius: f32,
        callback: JPH_CollideShapeBodyCollector,
        userData: *mut ::std::os::raw::c_void,
        broadPhaseLayerFilter: *mut JPH_BroadPhaseLayerFilter,
        objectLayerFilter: *mut JPH_ObjectLayerFilter,
    ) -> bool;
}
extern "C" {
    pub fn JPH_BroadPhaseQuery_CollidePoint(
        query: *const JPH_BroadPhaseQuery,
        point: *const JPH_Vec3,
        callback: JPH_CollideShapeBodyCollector,
        userData: *mut ::std::os::raw::c_void,
        broadPhaseLayerFilter: *mut JPH_BroadPhaseLayerFilter,
        objectLayerFilter: *mut JPH_ObjectLayerFilter,
    ) -> bool;
}
extern "C" {
    pub fn JPH_NarrowPhaseQuery_CastRay(
        query: *const JPH_NarrowPhaseQuery,
        origin: *const JPH_RVec3,
        direction: *const JPH_Vec3,
        hit: *mut JPH_RayCastResult,
        broadPhaseLayerFilter: *mut JPH_BroadPhaseLayerFilter,
        objectLayerFilter: *mut JPH_ObjectLayerFilter,
        bodyFilter: *mut JPH_BodyFilter,
    ) -> bool;
}
extern "C" {
    pub fn JPH_NarrowPhaseQuery_CastRay2(
        query: *const JPH_NarrowPhaseQuery,
        origin: *const JPH_RVec3,
        direction: *const JPH_Vec3,
        rayCastSettings: *const JPH_RayCastSettings,
        callback: JPH_CastRayCollector,
        userData: *mut ::std::os::raw::c_void,
        broadPhaseLayerFilter: *mut JPH_BroadPhaseLayerFilter,
        objectLayerFilter: *mut JPH_ObjectLayerFilter,
        bodyFilter: *mut JPH_BodyFilter,
        shapeFilter: *mut JPH_ShapeFilter,
    ) -> bool;
}
extern "C" {
    pub fn JPH_NarrowPhaseQuery_CastRay3(
        query: *const JPH_NarrowPhaseQuery,
        origin: *const JPH_RVec3,
        direction: *const JPH_Vec3,
        rayCastSettings: *const JPH_RayCastSettings,
        collectorType: JPH_CollisionCollectorType,
        callback: JPH_CastRayResultCallback,
        userData: *mut ::std::os::raw::c_void,
        broadPhaseLayerFilter: *mut JPH_BroadPhaseLayerFilter,
        objectLayerFilter: *mut JPH_ObjectLayerFilter,
        bodyFilter: *mut JPH_BodyFilter,
        shapeFilter: *mut JPH_ShapeFilter,
    ) -> bool;
}
extern "C" {
    pub fn JPH_NarrowPhaseQuery_CollidePoint(
        query: *const JPH_NarrowPhaseQuery,
        point: *const JPH_RVec3,
        callback: JPH_CollidePointCollector,
        userData: *mut ::std::os::raw::c_void,
        broadPhaseLayerFilter: *mut JPH_BroadPhaseLayerFilter,
        objectLayerFilter: *mut JPH_ObjectLayerFilter,
        bodyFilter: *mut JPH_BodyFilter,
        shapeFilter: *mut JPH_ShapeFilter,
    ) -> bool;
}
extern "C" {
    pub fn JPH_NarrowPhaseQuery_CollidePoint2(
        query: *const JPH_NarrowPhaseQuery,
        point: *const JPH_RVec3,
        collectorType: JPH_CollisionCollectorType,
        callback: JPH_CollidePointResultCallback,
        userData: *mut ::std::os::raw::c_void,
        broadPhaseLayerFilter: *mut JPH_BroadPhaseLayerFilter,
        objectLayerFilter: *mut JPH_ObjectLayerFilter,
        bodyFilter: *mut JPH_BodyFilter,
        shapeFilter: *mut JPH_ShapeFilter,
    ) -> bool;
}
extern "C" {
    pub fn JPH_NarrowPhaseQuery_CollideShape(
        query: *const JPH_NarrowPhaseQuery,
        shape: *const JPH_Shape,
        scale: *const JPH_Vec3,
        centerOfMassTransform: *const JPH_RMatrix4x4,
        settings: *const JPH_CollideShapeSettings,
        baseOffset: *mut JPH_RVec3,
        callback: JPH_CollideShapeCollector,
        userData: *mut ::std::os::raw::c_void,
        broadPhaseLayerFilter: *mut JPH_BroadPhaseLayerFilter,
        objectLayerFilter: *mut JPH_ObjectLayerFilter,
        bodyFilter: *mut JPH_BodyFilter,
        shapeFilter: *mut JPH_ShapeFilter,
    ) -> bool;
}
extern "C" {
    pub fn JPH_NarrowPhaseQuery_CollideShape2(
        query: *const JPH_NarrowPhaseQuery,
        shape: *const JPH_Shape,
        scale: *const JPH_Vec3,
        centerOfMassTransform: *const JPH_RMatrix4x4,
        settings: *const JPH_CollideShapeSettings,
        baseOffset: *mut JPH_RVec3,
        collectorType: JPH_CollisionCollectorType,
        callback: JPH_CollideShapeResultCallback,
        userData: *mut ::std::os::raw::c_void,
        broadPhaseLayerFilter: *mut JPH_BroadPhaseLayerFilter,
        objectLayerFilter: *mut JPH_ObjectLayerFilter,
        bodyFilter: *mut JPH_BodyFilter,
        shapeFilter: *mut JPH_ShapeFilter,
    ) -> bool;
}
extern "C" {
    pub fn JPH_NarrowPhaseQuery_CastShape(
        query: *const JPH_NarrowPhaseQuery,
        shape: *const JPH_Shape,
        worldTransform: *const JPH_RMatrix4x4,
        direction: *const JPH_Vec3,
        settings: *const JPH_ShapeCastSettings,
        baseOffset: *mut JPH_RVec3,
        callback: JPH_CastShapeCollector,
        userData: *mut ::std::os::raw::c_void,
        broadPhaseLayerFilter: *mut JPH_BroadPhaseLayerFilter,
        objectLayerFilter: *mut JPH_ObjectLayerFilter,
        bodyFilter: *mut JPH_BodyFilter,
        shapeFilter: *mut JPH_ShapeFilter,
    ) -> bool;
}
extern "C" {
    pub fn JPH_NarrowPhaseQuery_CastShape2(
        query: *const JPH_NarrowPhaseQuery,
        shape: *const JPH_Shape,
        worldTransform: *const JPH_RMatrix4x4,
        direction: *const JPH_Vec3,
        settings: *const JPH_ShapeCastSettings,
        baseOffset: *mut JPH_RVec3,
        collectorType: JPH_CollisionCollectorType,
        callback: JPH_CastShapeResultCallback,
        userData: *mut ::std::os::raw::c_void,
        broadPhaseLayerFilter: *mut JPH_BroadPhaseLayerFilter,
        objectLayerFilter: *mut JPH_ObjectLayerFilter,
        bodyFilter: *mut JPH_BodyFilter,
        shapeFilter: *mut JPH_ShapeFilter,
    ) -> bool;
}
extern "C" {
    pub fn JPH_Body_GetID(body: *const JPH_Body) -> JPH_BodyID;
}
extern "C" {
    pub fn JPH_Body_GetBodyType(body: *const JPH_Body) -> JPH_BodyType;
}
extern "C" {
    pub fn JPH_Body_IsRigidBody(body: *const JPH_Body) -> bool;
}
extern "C" {
    pub fn JPH_Body_IsSoftBody(body: *const JPH_Body) -> bool;
}
extern "C" {
    pub fn JPH_Body_IsActive(body: *const JPH_Body) -> bool;
}
extern "C" {
    pub fn JPH_Body_IsStatic(body: *const JPH_Body) -> bool;
}
extern "C" {
    pub fn JPH_Body_IsKinematic(body: *const JPH_Body) -> bool;
}
extern "C" {
    pub fn JPH_Body_IsDynamic(body: *const JPH_Body) -> bool;
}
extern "C" {
    pub fn JPH_Body_CanBeKinematicOrDynamic(body: *const JPH_Body) -> bool;
}
extern "C" {
    pub fn JPH_Body_SetIsSensor(body: *mut JPH_Body, value: bool);
}
extern "C" {
    pub fn JPH_Body_IsSensor(body: *const JPH_Body) -> bool;
}
extern "C" {
    pub fn JPH_Body_SetCollideKinematicVsNonDynamic(body: *mut JPH_Body, value: bool);
}
extern "C" {
    pub fn JPH_Body_GetCollideKinematicVsNonDynamic(body: *const JPH_Body) -> bool;
}
extern "C" {
    pub fn JPH_Body_SetUseManifoldReduction(body: *mut JPH_Body, value: bool);
}
extern "C" {
    pub fn JPH_Body_GetUseManifoldReduction(body: *const JPH_Body) -> bool;
}
extern "C" {
    pub fn JPH_Body_GetUseManifoldReductionWithBody(
        body: *const JPH_Body,
        other: *const JPH_Body,
    ) -> bool;
}
extern "C" {
    pub fn JPH_Body_SetApplyGyroscopicForce(body: *mut JPH_Body, value: bool);
}
extern "C" {
    pub fn JPH_Body_GetApplyGyroscopicForce(body: *const JPH_Body) -> bool;
}
extern "C" {
    pub fn JPH_Body_SetEnhancedInternalEdgeRemoval(body: *mut JPH_Body, value: bool);
}
extern "C" {
    pub fn JPH_Body_GetEnhancedInternalEdgeRemoval(body: *const JPH_Body) -> bool;
}
extern "C" {
    pub fn JPH_Body_GetEnhancedInternalEdgeRemovalWithBody(
        body: *const JPH_Body,
        other: *const JPH_Body,
    ) -> bool;
}
extern "C" {
    pub fn JPH_Body_GetMotionType(body: *const JPH_Body) -> JPH_MotionType;
}
extern "C" {
    pub fn JPH_Body_SetMotionType(body: *mut JPH_Body, motionType: JPH_MotionType);
}
extern "C" {
    pub fn JPH_Body_GetBroadPhaseLayer(body: *const JPH_Body) -> JPH_BroadPhaseLayer;
}
extern "C" {
    pub fn JPH_Body_GetObjectLayer(body: *const JPH_Body) -> JPH_ObjectLayer;
}
extern "C" {
    pub fn JPH_Body_GetAllowSleeping(body: *mut JPH_Body) -> bool;
}
extern "C" {
    pub fn JPH_Body_SetAllowSleeping(body: *mut JPH_Body, allowSleeping: bool);
}
extern "C" {
    pub fn JPH_Body_ResetSleepTimer(body: *mut JPH_Body);
}
extern "C" {
    pub fn JPH_Body_GetFriction(body: *const JPH_Body) -> f32;
}
extern "C" {
    pub fn JPH_Body_SetFriction(body: *mut JPH_Body, friction: f32);
}
extern "C" {
    pub fn JPH_Body_GetRestitution(body: *const JPH_Body) -> f32;
}
extern "C" {
    pub fn JPH_Body_SetRestitution(body: *mut JPH_Body, restitution: f32);
}
extern "C" {
    pub fn JPH_Body_GetLinearVelocity(body: *mut JPH_Body, velocity: *mut JPH_Vec3);
}
extern "C" {
    pub fn JPH_Body_SetLinearVelocity(body: *mut JPH_Body, velocity: *const JPH_Vec3);
}
extern "C" {
    pub fn JPH_Body_SetLinearVelocityClamped(body: *mut JPH_Body, velocity: *const JPH_Vec3);
}
extern "C" {
    pub fn JPH_Body_GetAngularVelocity(body: *mut JPH_Body, velocity: *mut JPH_Vec3);
}
extern "C" {
    pub fn JPH_Body_SetAngularVelocity(body: *mut JPH_Body, velocity: *const JPH_Vec3);
}
extern "C" {
    pub fn JPH_Body_SetAngularVelocityClamped(body: *mut JPH_Body, velocity: *const JPH_Vec3);
}
extern "C" {
    pub fn JPH_Body_GetPointVelocityCOM(
        body: *mut JPH_Body,
        pointRelativeToCOM: *const JPH_Vec3,
        velocity: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_Body_GetPointVelocity(
        body: *mut JPH_Body,
        point: *const JPH_RVec3,
        velocity: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_Body_AddForce(body: *mut JPH_Body, force: *const JPH_Vec3);
}
extern "C" {
    pub fn JPH_Body_AddForceAtPosition(
        body: *mut JPH_Body,
        force: *const JPH_Vec3,
        position: *const JPH_RVec3,
    );
}
extern "C" {
    pub fn JPH_Body_AddTorque(body: *mut JPH_Body, force: *const JPH_Vec3);
}
extern "C" {
    pub fn JPH_Body_GetAccumulatedForce(body: *mut JPH_Body, force: *mut JPH_Vec3);
}
extern "C" {
    pub fn JPH_Body_GetAccumulatedTorque(body: *mut JPH_Body, force: *mut JPH_Vec3);
}
extern "C" {
    pub fn JPH_Body_ResetForce(body: *mut JPH_Body);
}
extern "C" {
    pub fn JPH_Body_ResetTorque(body: *mut JPH_Body);
}
extern "C" {
    pub fn JPH_Body_ResetMotion(body: *mut JPH_Body);
}
extern "C" {
    pub fn JPH_Body_GetInverseInertia(body: *mut JPH_Body, result: *mut JPH_Matrix4x4);
}
extern "C" {
    pub fn JPH_Body_AddImpulse(body: *mut JPH_Body, impulse: *const JPH_Vec3);
}
extern "C" {
    pub fn JPH_Body_AddImpulseAtPosition(
        body: *mut JPH_Body,
        impulse: *const JPH_Vec3,
        position: *const JPH_RVec3,
    );
}
extern "C" {
    pub fn JPH_Body_AddAngularImpulse(body: *mut JPH_Body, angularImpulse: *const JPH_Vec3);
}
extern "C" {
    pub fn JPH_Body_MoveKinematic(
        body: *mut JPH_Body,
        targetPosition: *mut JPH_RVec3,
        targetRotation: *mut JPH_Quat,
        deltaTime: f32,
    );
}
extern "C" {
    pub fn JPH_Body_ApplyBuoyancyImpulse(
        body: *mut JPH_Body,
        surfacePosition: *const JPH_RVec3,
        surfaceNormal: *const JPH_Vec3,
        buoyancy: f32,
        linearDrag: f32,
        angularDrag: f32,
        fluidVelocity: *const JPH_Vec3,
        gravity: *const JPH_Vec3,
        deltaTime: f32,
    ) -> bool;
}
extern "C" {
    pub fn JPH_Body_IsInBroadPhase(body: *mut JPH_Body) -> bool;
}
extern "C" {
    pub fn JPH_Body_IsCollisionCacheInvalid(body: *mut JPH_Body) -> bool;
}
extern "C" {
    pub fn JPH_Body_GetShape(body: *mut JPH_Body) -> *const JPH_Shape;
}
extern "C" {
    pub fn JPH_Body_GetPosition(body: *const JPH_Body, result: *mut JPH_RVec3);
}
extern "C" {
    pub fn JPH_Body_GetRotation(body: *const JPH_Body, result: *mut JPH_Quat);
}
extern "C" {
    pub fn JPH_Body_GetWorldTransform(body: *const JPH_Body, result: *mut JPH_RMatrix4x4);
}
extern "C" {
    pub fn JPH_Body_GetCenterOfMassPosition(body: *const JPH_Body, result: *mut JPH_RVec3);
}
extern "C" {
    pub fn JPH_Body_GetCenterOfMassTransform(body: *const JPH_Body, result: *mut JPH_RMatrix4x4);
}
extern "C" {
    pub fn JPH_Body_GetInverseCenterOfMassTransform(
        body: *const JPH_Body,
        result: *mut JPH_RMatrix4x4,
    );
}
extern "C" {
    pub fn JPH_Body_GetWorldSpaceBounds(body: *const JPH_Body, result: *mut JPH_AABox);
}
extern "C" {
    pub fn JPH_Body_GetWorldSpaceSurfaceNormal(
        body: *const JPH_Body,
        subShapeID: JPH_SubShapeID,
        position: *const JPH_RVec3,
        normal: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_Body_GetMotionProperties(body: *mut JPH_Body) -> *mut JPH_MotionProperties;
}
extern "C" {
    pub fn JPH_Body_GetMotionPropertiesUnchecked(body: *mut JPH_Body) -> *mut JPH_MotionProperties;
}
extern "C" {
    pub fn JPH_Body_SetUserData(body: *mut JPH_Body, userData: u64);
}
extern "C" {
    pub fn JPH_Body_GetUserData(body: *mut JPH_Body) -> u64;
}
extern "C" {
    pub fn JPH_Body_GetFixedToWorldBody() -> *mut JPH_Body;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_BroadPhaseLayerFilter_Procs {
    pub ShouldCollide: ::std::option::Option<
        unsafe extern "C" fn(
            userData: *mut ::std::os::raw::c_void,
            layer: JPH_BroadPhaseLayer,
        ) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_JPH_BroadPhaseLayerFilter_Procs() {
    const UNINIT: ::std::mem::MaybeUninit<JPH_BroadPhaseLayerFilter_Procs> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JPH_BroadPhaseLayerFilter_Procs>(),
        8usize,
        concat!("Size of: ", stringify!(JPH_BroadPhaseLayerFilter_Procs))
    );
    assert_eq!(
        ::std::mem::align_of::<JPH_BroadPhaseLayerFilter_Procs>(),
        8usize,
        concat!("Alignment of ", stringify!(JPH_BroadPhaseLayerFilter_Procs))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ShouldCollide) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_BroadPhaseLayerFilter_Procs),
            "::",
            stringify!(ShouldCollide)
        )
    );
}
extern "C" {
    pub fn JPH_BroadPhaseLayerFilter_Create(
        procs: JPH_BroadPhaseLayerFilter_Procs,
        userData: *mut ::std::os::raw::c_void,
    ) -> *mut JPH_BroadPhaseLayerFilter;
}
extern "C" {
    pub fn JPH_BroadPhaseLayerFilter_Destroy(filter: *mut JPH_BroadPhaseLayerFilter);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_ObjectLayerFilter_Procs {
    pub ShouldCollide: ::std::option::Option<
        unsafe extern "C" fn(userData: *mut ::std::os::raw::c_void, layer: JPH_ObjectLayer) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_JPH_ObjectLayerFilter_Procs() {
    const UNINIT: ::std::mem::MaybeUninit<JPH_ObjectLayerFilter_Procs> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JPH_ObjectLayerFilter_Procs>(),
        8usize,
        concat!("Size of: ", stringify!(JPH_ObjectLayerFilter_Procs))
    );
    assert_eq!(
        ::std::mem::align_of::<JPH_ObjectLayerFilter_Procs>(),
        8usize,
        concat!("Alignment of ", stringify!(JPH_ObjectLayerFilter_Procs))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ShouldCollide) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_ObjectLayerFilter_Procs),
            "::",
            stringify!(ShouldCollide)
        )
    );
}
extern "C" {
    pub fn JPH_ObjectLayerFilter_Create(
        procs: JPH_ObjectLayerFilter_Procs,
        userData: *mut ::std::os::raw::c_void,
    ) -> *mut JPH_ObjectLayerFilter;
}
extern "C" {
    pub fn JPH_ObjectLayerFilter_Destroy(filter: *mut JPH_ObjectLayerFilter);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_BodyFilter_Procs {
    pub ShouldCollide: ::std::option::Option<
        unsafe extern "C" fn(userData: *mut ::std::os::raw::c_void, bodyID: JPH_BodyID) -> bool,
    >,
    pub ShouldCollideLocked: ::std::option::Option<
        unsafe extern "C" fn(
            userData: *mut ::std::os::raw::c_void,
            bodyID: *const JPH_Body,
        ) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_JPH_BodyFilter_Procs() {
    const UNINIT: ::std::mem::MaybeUninit<JPH_BodyFilter_Procs> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JPH_BodyFilter_Procs>(),
        16usize,
        concat!("Size of: ", stringify!(JPH_BodyFilter_Procs))
    );
    assert_eq!(
        ::std::mem::align_of::<JPH_BodyFilter_Procs>(),
        8usize,
        concat!("Alignment of ", stringify!(JPH_BodyFilter_Procs))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ShouldCollide) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_BodyFilter_Procs),
            "::",
            stringify!(ShouldCollide)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ShouldCollideLocked) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_BodyFilter_Procs),
            "::",
            stringify!(ShouldCollideLocked)
        )
    );
}
extern "C" {
    pub fn JPH_BodyFilter_Create(
        procs: JPH_BodyFilter_Procs,
        userData: *mut ::std::os::raw::c_void,
    ) -> *mut JPH_BodyFilter;
}
extern "C" {
    pub fn JPH_BodyFilter_Destroy(filter: *mut JPH_BodyFilter);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_ShapeFilter_Procs {
    pub ShouldCollide: ::std::option::Option<
        unsafe extern "C" fn(
            userData: *mut ::std::os::raw::c_void,
            shape2: *const JPH_Shape,
            subShapeIDOfShape2: *const JPH_SubShapeID,
        ) -> bool,
    >,
    pub ShouldCollide2: ::std::option::Option<
        unsafe extern "C" fn(
            userData: *mut ::std::os::raw::c_void,
            shape1: *const JPH_Shape,
            subShapeIDOfShape1: *const JPH_SubShapeID,
            shape2: *const JPH_Shape,
            subShapeIDOfShape2: *const JPH_SubShapeID,
        ) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_JPH_ShapeFilter_Procs() {
    const UNINIT: ::std::mem::MaybeUninit<JPH_ShapeFilter_Procs> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JPH_ShapeFilter_Procs>(),
        16usize,
        concat!("Size of: ", stringify!(JPH_ShapeFilter_Procs))
    );
    assert_eq!(
        ::std::mem::align_of::<JPH_ShapeFilter_Procs>(),
        8usize,
        concat!("Alignment of ", stringify!(JPH_ShapeFilter_Procs))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ShouldCollide) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_ShapeFilter_Procs),
            "::",
            stringify!(ShouldCollide)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ShouldCollide2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_ShapeFilter_Procs),
            "::",
            stringify!(ShouldCollide2)
        )
    );
}
extern "C" {
    pub fn JPH_ShapeFilter_Create(
        procs: JPH_ShapeFilter_Procs,
        userData: *mut ::std::os::raw::c_void,
    ) -> *mut JPH_ShapeFilter;
}
extern "C" {
    pub fn JPH_ShapeFilter_Destroy(filter: *mut JPH_ShapeFilter);
}
extern "C" {
    pub fn JPH_ShapeFilter_GetBodyID2(filter: *mut JPH_ShapeFilter) -> JPH_BodyID;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_ContactListener_Procs {
    pub OnContactValidate: ::std::option::Option<
        unsafe extern "C" fn(
            userData: *mut ::std::os::raw::c_void,
            body1: *const JPH_Body,
            body2: *const JPH_Body,
            baseOffset: *const JPH_RVec3,
            collisionResult: *const JPH_CollideShapeResult,
        ) -> JPH_ValidateResult,
    >,
    pub OnContactAdded: ::std::option::Option<
        unsafe extern "C" fn(
            userData: *mut ::std::os::raw::c_void,
            body1: *const JPH_Body,
            body2: *const JPH_Body,
            manifold: *const JPH_ContactManifold,
            settings: *mut JPH_ContactSettings,
        ),
    >,
    pub OnContactPersisted: ::std::option::Option<
        unsafe extern "C" fn(
            userData: *mut ::std::os::raw::c_void,
            body1: *const JPH_Body,
            body2: *const JPH_Body,
            manifold: *const JPH_ContactManifold,
            settings: *mut JPH_ContactSettings,
        ),
    >,
    pub OnContactRemoved: ::std::option::Option<
        unsafe extern "C" fn(
            userData: *mut ::std::os::raw::c_void,
            subShapePair: *const JPH_SubShapeIDPair,
        ),
    >,
}
#[test]
fn bindgen_test_layout_JPH_ContactListener_Procs() {
    const UNINIT: ::std::mem::MaybeUninit<JPH_ContactListener_Procs> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JPH_ContactListener_Procs>(),
        32usize,
        concat!("Size of: ", stringify!(JPH_ContactListener_Procs))
    );
    assert_eq!(
        ::std::mem::align_of::<JPH_ContactListener_Procs>(),
        8usize,
        concat!("Alignment of ", stringify!(JPH_ContactListener_Procs))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OnContactValidate) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_ContactListener_Procs),
            "::",
            stringify!(OnContactValidate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OnContactAdded) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_ContactListener_Procs),
            "::",
            stringify!(OnContactAdded)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OnContactPersisted) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_ContactListener_Procs),
            "::",
            stringify!(OnContactPersisted)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OnContactRemoved) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_ContactListener_Procs),
            "::",
            stringify!(OnContactRemoved)
        )
    );
}
extern "C" {
    pub fn JPH_ContactListener_Create(
        procs: JPH_ContactListener_Procs,
        userData: *mut ::std::os::raw::c_void,
    ) -> *mut JPH_ContactListener;
}
extern "C" {
    pub fn JPH_ContactListener_Destroy(listener: *mut JPH_ContactListener);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_BodyActivationListener_Procs {
    pub OnBodyActivated: ::std::option::Option<
        unsafe extern "C" fn(
            userData: *mut ::std::os::raw::c_void,
            bodyID: JPH_BodyID,
            bodyUserData: u64,
        ),
    >,
    pub OnBodyDeactivated: ::std::option::Option<
        unsafe extern "C" fn(
            userData: *mut ::std::os::raw::c_void,
            bodyID: JPH_BodyID,
            bodyUserData: u64,
        ),
    >,
}
#[test]
fn bindgen_test_layout_JPH_BodyActivationListener_Procs() {
    const UNINIT: ::std::mem::MaybeUninit<JPH_BodyActivationListener_Procs> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JPH_BodyActivationListener_Procs>(),
        16usize,
        concat!("Size of: ", stringify!(JPH_BodyActivationListener_Procs))
    );
    assert_eq!(
        ::std::mem::align_of::<JPH_BodyActivationListener_Procs>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(JPH_BodyActivationListener_Procs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OnBodyActivated) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_BodyActivationListener_Procs),
            "::",
            stringify!(OnBodyActivated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OnBodyDeactivated) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_BodyActivationListener_Procs),
            "::",
            stringify!(OnBodyDeactivated)
        )
    );
}
extern "C" {
    pub fn JPH_BodyActivationListener_Create(
        procs: JPH_BodyActivationListener_Procs,
        userData: *mut ::std::os::raw::c_void,
    ) -> *mut JPH_BodyActivationListener;
}
extern "C" {
    pub fn JPH_BodyActivationListener_Destroy(listener: *mut JPH_BodyActivationListener);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_BodyDrawFilter_Procs {
    pub ShouldDraw: ::std::option::Option<
        unsafe extern "C" fn(userData: *mut ::std::os::raw::c_void, body: *const JPH_Body) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_JPH_BodyDrawFilter_Procs() {
    const UNINIT: ::std::mem::MaybeUninit<JPH_BodyDrawFilter_Procs> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JPH_BodyDrawFilter_Procs>(),
        8usize,
        concat!("Size of: ", stringify!(JPH_BodyDrawFilter_Procs))
    );
    assert_eq!(
        ::std::mem::align_of::<JPH_BodyDrawFilter_Procs>(),
        8usize,
        concat!("Alignment of ", stringify!(JPH_BodyDrawFilter_Procs))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ShouldDraw) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_BodyDrawFilter_Procs),
            "::",
            stringify!(ShouldDraw)
        )
    );
}
extern "C" {
    pub fn JPH_BodyDrawFilter_Create(
        procs: JPH_BodyDrawFilter_Procs,
        userData: *mut ::std::os::raw::c_void,
    ) -> *mut JPH_BodyDrawFilter;
}
extern "C" {
    pub fn JPH_BodyDrawFilter_Destroy(filter: *mut JPH_BodyDrawFilter);
}
extern "C" {
    pub fn JPH_ContactManifold_GetWorldSpaceNormal(
        manifold: *const JPH_ContactManifold,
        result: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_ContactManifold_GetPenetrationDepth(manifold: *const JPH_ContactManifold) -> f32;
}
extern "C" {
    pub fn JPH_ContactManifold_GetSubShapeID1(
        manifold: *const JPH_ContactManifold,
    ) -> JPH_SubShapeID;
}
extern "C" {
    pub fn JPH_ContactManifold_GetSubShapeID2(
        manifold: *const JPH_ContactManifold,
    ) -> JPH_SubShapeID;
}
extern "C" {
    pub fn JPH_ContactManifold_GetPointCount(manifold: *const JPH_ContactManifold) -> u32;
}
extern "C" {
    pub fn JPH_ContactManifold_GetWorldSpaceContactPointOn1(
        manifold: *const JPH_ContactManifold,
        index: u32,
        result: *mut JPH_RVec3,
    );
}
extern "C" {
    pub fn JPH_ContactManifold_GetWorldSpaceContactPointOn2(
        manifold: *const JPH_ContactManifold,
        index: u32,
        result: *mut JPH_RVec3,
    );
}
extern "C" {
    pub fn JPH_ContactSettings_GetFriction(settings: *mut JPH_ContactSettings) -> f32;
}
extern "C" {
    pub fn JPH_ContactSettings_SetFriction(settings: *mut JPH_ContactSettings, friction: f32);
}
extern "C" {
    pub fn JPH_ContactSettings_GetRestitution(settings: *mut JPH_ContactSettings) -> f32;
}
extern "C" {
    pub fn JPH_ContactSettings_SetRestitution(settings: *mut JPH_ContactSettings, restitution: f32);
}
extern "C" {
    pub fn JPH_ContactSettings_GetInvMassScale1(settings: *mut JPH_ContactSettings) -> f32;
}
extern "C" {
    pub fn JPH_ContactSettings_SetInvMassScale1(settings: *mut JPH_ContactSettings, scale: f32);
}
extern "C" {
    pub fn JPH_ContactSettings_GetInvInertiaScale1(settings: *mut JPH_ContactSettings) -> f32;
}
extern "C" {
    pub fn JPH_ContactSettings_SetInvInertiaScale1(settings: *mut JPH_ContactSettings, scale: f32);
}
extern "C" {
    pub fn JPH_ContactSettings_GetInvMassScale2(settings: *mut JPH_ContactSettings) -> f32;
}
extern "C" {
    pub fn JPH_ContactSettings_SetInvMassScale2(settings: *mut JPH_ContactSettings, scale: f32);
}
extern "C" {
    pub fn JPH_ContactSettings_GetInvInertiaScale2(settings: *mut JPH_ContactSettings) -> f32;
}
extern "C" {
    pub fn JPH_ContactSettings_SetInvInertiaScale2(settings: *mut JPH_ContactSettings, scale: f32);
}
extern "C" {
    pub fn JPH_ContactSettings_GetIsSensor(settings: *mut JPH_ContactSettings) -> bool;
}
extern "C" {
    pub fn JPH_ContactSettings_SetIsSensor(settings: *mut JPH_ContactSettings, sensor: bool);
}
extern "C" {
    pub fn JPH_ContactSettings_GetRelativeLinearSurfaceVelocity(
        settings: *mut JPH_ContactSettings,
        result: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_ContactSettings_SetRelativeLinearSurfaceVelocity(
        settings: *mut JPH_ContactSettings,
        velocity: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_ContactSettings_GetRelativeAngularSurfaceVelocity(
        settings: *mut JPH_ContactSettings,
        result: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_ContactSettings_SetRelativeAngularSurfaceVelocity(
        settings: *mut JPH_ContactSettings,
        velocity: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_CharacterBase_Destroy(character: *mut JPH_CharacterBase);
}
extern "C" {
    pub fn JPH_CharacterBase_GetCosMaxSlopeAngle(character: *mut JPH_CharacterBase) -> f32;
}
extern "C" {
    pub fn JPH_CharacterBase_SetMaxSlopeAngle(
        character: *mut JPH_CharacterBase,
        maxSlopeAngle: f32,
    );
}
extern "C" {
    pub fn JPH_CharacterBase_GetUp(character: *mut JPH_CharacterBase, result: *mut JPH_Vec3);
}
extern "C" {
    pub fn JPH_CharacterBase_SetUp(character: *mut JPH_CharacterBase, value: *const JPH_Vec3);
}
extern "C" {
    pub fn JPH_CharacterBase_IsSlopeTooSteep(
        character: *mut JPH_CharacterBase,
        value: *const JPH_Vec3,
    ) -> bool;
}
extern "C" {
    pub fn JPH_CharacterBase_GetShape(character: *mut JPH_CharacterBase) -> *const JPH_Shape;
}
extern "C" {
    pub fn JPH_CharacterBase_GetGroundState(character: *mut JPH_CharacterBase) -> JPH_GroundState;
}
extern "C" {
    pub fn JPH_CharacterBase_IsSupported(character: *mut JPH_CharacterBase) -> bool;
}
extern "C" {
    pub fn JPH_CharacterBase_GetGroundPosition(
        character: *mut JPH_CharacterBase,
        position: *mut JPH_RVec3,
    );
}
extern "C" {
    pub fn JPH_CharacterBase_GetGroundNormal(
        character: *mut JPH_CharacterBase,
        normal: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_CharacterBase_GetGroundVelocity(
        character: *mut JPH_CharacterBase,
        velocity: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_CharacterBase_GetGroundMaterial(
        character: *mut JPH_CharacterBase,
    ) -> *const JPH_PhysicsMaterial;
}
extern "C" {
    pub fn JPH_CharacterBase_GetGroundBodyId(character: *mut JPH_CharacterBase) -> JPH_BodyID;
}
extern "C" {
    pub fn JPH_CharacterBase_GetGroundSubShapeId(
        character: *mut JPH_CharacterBase,
    ) -> JPH_SubShapeID;
}
extern "C" {
    pub fn JPH_CharacterBase_GetGroundUserData(character: *mut JPH_CharacterBase) -> u64;
}
extern "C" {
    pub fn JPH_CharacterSettings_Init(settings: *mut JPH_CharacterSettings);
}
extern "C" {
    pub fn JPH_Character_Create(
        settings: *const JPH_CharacterSettings,
        position: *const JPH_RVec3,
        rotation: *const JPH_Quat,
        userData: u64,
        system: *mut JPH_PhysicsSystem,
    ) -> *mut JPH_Character;
}
extern "C" {
    pub fn JPH_Character_AddToPhysicsSystem(
        character: *mut JPH_Character,
        activationMode: JPH_Activation,
        lockBodies: bool,
    );
}
extern "C" {
    pub fn JPH_Character_RemoveFromPhysicsSystem(character: *mut JPH_Character, lockBodies: bool);
}
extern "C" {
    pub fn JPH_Character_Activate(character: *mut JPH_Character, lockBodies: bool);
}
extern "C" {
    pub fn JPH_Character_PostSimulation(
        character: *mut JPH_Character,
        maxSeparationDistance: f32,
        lockBodies: bool,
    );
}
extern "C" {
    pub fn JPH_CharacterVirtualSettings_Init(settings: *mut JPH_CharacterVirtualSettings);
}
extern "C" {
    pub fn JPH_CharacterVirtual_Create(
        settings: *const JPH_CharacterVirtualSettings,
        position: *const JPH_RVec3,
        rotation: *const JPH_Quat,
        userData: u64,
        system: *mut JPH_PhysicsSystem,
    ) -> *mut JPH_CharacterVirtual;
}
extern "C" {
    pub fn JPH_CharacterVirtual_SetListener(
        character: *mut JPH_CharacterVirtual,
        listener: *mut JPH_CharacterContactListener,
    );
}
extern "C" {
    pub fn JPH_CharacterVirtual_GetLinearVelocity(
        character: *mut JPH_CharacterVirtual,
        velocity: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_CharacterVirtual_SetLinearVelocity(
        character: *mut JPH_CharacterVirtual,
        velocity: *const JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_CharacterVirtual_GetPosition(
        character: *mut JPH_CharacterVirtual,
        position: *mut JPH_RVec3,
    );
}
extern "C" {
    pub fn JPH_CharacterVirtual_SetPosition(
        character: *mut JPH_CharacterVirtual,
        position: *const JPH_RVec3,
    );
}
extern "C" {
    pub fn JPH_CharacterVirtual_GetRotation(
        character: *mut JPH_CharacterVirtual,
        rotation: *mut JPH_Quat,
    );
}
extern "C" {
    pub fn JPH_CharacterVirtual_SetRotation(
        character: *mut JPH_CharacterVirtual,
        rotation: *const JPH_Quat,
    );
}
extern "C" {
    pub fn JPH_CharacterVirtual_GetWorldTransform(
        character: *mut JPH_CharacterVirtual,
        result: *mut JPH_RMatrix4x4,
    );
}
extern "C" {
    pub fn JPH_CharacterVirtual_GetCenterOfMassTransform(
        character: *mut JPH_CharacterVirtual,
        result: *mut JPH_RMatrix4x4,
    );
}
extern "C" {
    pub fn JPH_CharacterVirtual_GetMass(character: *mut JPH_CharacterVirtual) -> f32;
}
extern "C" {
    pub fn JPH_CharacterVirtual_SetMass(character: *mut JPH_CharacterVirtual, value: f32);
}
extern "C" {
    pub fn JPH_CharacterVirtual_GetMaxStrength(character: *mut JPH_CharacterVirtual) -> f32;
}
extern "C" {
    pub fn JPH_CharacterVirtual_SetMaxStrength(character: *mut JPH_CharacterVirtual, value: f32);
}
extern "C" {
    pub fn JPH_CharacterVirtual_GetPenetrationRecoverySpeed(
        character: *mut JPH_CharacterVirtual,
    ) -> f32;
}
extern "C" {
    pub fn JPH_CharacterVirtual_SetPenetrationRecoverySpeed(
        character: *mut JPH_CharacterVirtual,
        value: f32,
    );
}
extern "C" {
    pub fn JPH_CharacterVirtual_GetEnhancedInternalEdgeRemoval(
        character: *mut JPH_CharacterVirtual,
    ) -> bool;
}
extern "C" {
    pub fn JPH_CharacterVirtual_SetEnhancedInternalEdgeRemoval(
        character: *mut JPH_CharacterVirtual,
        value: bool,
    );
}
extern "C" {
    pub fn JPH_CharacterVirtual_GetCharacterPadding(character: *mut JPH_CharacterVirtual) -> f32;
}
extern "C" {
    pub fn JPH_CharacterVirtual_GetMaxNumHits(character: *mut JPH_CharacterVirtual) -> u32;
}
extern "C" {
    pub fn JPH_CharacterVirtual_SetMaxNumHits(character: *mut JPH_CharacterVirtual, value: u32);
}
extern "C" {
    pub fn JPH_CharacterVirtual_GetHitReductionCosMaxAngle(
        character: *mut JPH_CharacterVirtual,
    ) -> f32;
}
extern "C" {
    pub fn JPH_CharacterVirtual_SetHitReductionCosMaxAngle(
        character: *mut JPH_CharacterVirtual,
        value: f32,
    );
}
extern "C" {
    pub fn JPH_CharacterVirtual_GetMaxHitsExceeded(character: *mut JPH_CharacterVirtual) -> bool;
}
extern "C" {
    pub fn JPH_CharacterVirtual_GetUserData(character: *mut JPH_CharacterVirtual) -> u64;
}
extern "C" {
    pub fn JPH_CharacterVirtual_SetUserData(character: *mut JPH_CharacterVirtual, value: u64);
}
extern "C" {
    pub fn JPH_CharacterVirtual_CancelVelocityTowardsSteepSlopes(
        character: *mut JPH_CharacterVirtual,
        desiredVelocity: *const JPH_Vec3,
        velocity: *mut JPH_Vec3,
    );
}
extern "C" {
    pub fn JPH_CharacterVirtual_Update(
        character: *mut JPH_CharacterVirtual,
        deltaTime: f32,
        layer: JPH_ObjectLayer,
        system: *mut JPH_PhysicsSystem,
    );
}
extern "C" {
    pub fn JPH_CharacterVirtual_ExtendedUpdate(
        character: *mut JPH_CharacterVirtual,
        deltaTime: f32,
        settings: *const JPH_ExtendedUpdateSettings,
        layer: JPH_ObjectLayer,
        system: *mut JPH_PhysicsSystem,
    );
}
extern "C" {
    pub fn JPH_CharacterVirtual_RefreshContacts(
        character: *mut JPH_CharacterVirtual,
        layer: JPH_ObjectLayer,
        system: *mut JPH_PhysicsSystem,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_CharacterContactListener_Procs {
    pub OnAdjustBodyVelocity: ::std::option::Option<
        unsafe extern "C" fn(
            userData: *mut ::std::os::raw::c_void,
            character: *const JPH_CharacterVirtual,
            body2: *const JPH_Body,
            linearVelocity: *const JPH_Vec3,
            angularVelocity: *const JPH_Vec3,
        ),
    >,
    pub OnContactValidate: ::std::option::Option<
        unsafe extern "C" fn(
            userData: *mut ::std::os::raw::c_void,
            character: *const JPH_CharacterVirtual,
            bodyID2: JPH_BodyID,
            subShapeID2: JPH_SubShapeID,
        ) -> bool,
    >,
    pub OnContactAdded: ::std::option::Option<
        unsafe extern "C" fn(
            userData: *mut ::std::os::raw::c_void,
            character: *const JPH_CharacterVirtual,
            bodyID2: JPH_BodyID,
            subShapeID2: JPH_SubShapeID,
            contactPosition: *const JPH_RVec3,
            contactNormal: *const JPH_Vec3,
            ioSettings: *mut JPH_CharacterContactSettings,
        ),
    >,
    pub OnContactSolve: ::std::option::Option<
        unsafe extern "C" fn(
            userData: *mut ::std::os::raw::c_void,
            character: *const JPH_CharacterVirtual,
            bodyID2: JPH_BodyID,
            subShapeID2: JPH_SubShapeID,
            contactPosition: *const JPH_RVec3,
            contactNormal: *const JPH_Vec3,
            contactVelocity: *const JPH_Vec3,
            contactMaterial: *const JPH_PhysicsMaterial,
            characterVelocity: *const JPH_Vec3,
            newCharacterVelocity: *mut JPH_Vec3,
        ),
    >,
}
#[test]
fn bindgen_test_layout_JPH_CharacterContactListener_Procs() {
    const UNINIT: ::std::mem::MaybeUninit<JPH_CharacterContactListener_Procs> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JPH_CharacterContactListener_Procs>(),
        32usize,
        concat!("Size of: ", stringify!(JPH_CharacterContactListener_Procs))
    );
    assert_eq!(
        ::std::mem::align_of::<JPH_CharacterContactListener_Procs>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(JPH_CharacterContactListener_Procs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OnAdjustBodyVelocity) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_CharacterContactListener_Procs),
            "::",
            stringify!(OnAdjustBodyVelocity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OnContactValidate) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_CharacterContactListener_Procs),
            "::",
            stringify!(OnContactValidate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OnContactAdded) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_CharacterContactListener_Procs),
            "::",
            stringify!(OnContactAdded)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OnContactSolve) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_CharacterContactListener_Procs),
            "::",
            stringify!(OnContactSolve)
        )
    );
}
extern "C" {
    pub fn JPH_CharacterContactListener_Create(
        procs: JPH_CharacterContactListener_Procs,
        userData: *mut ::std::os::raw::c_void,
    ) -> *mut JPH_CharacterContactListener;
}
extern "C" {
    pub fn JPH_CharacterContactListener_Destroy(listener: *mut JPH_CharacterContactListener);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPH_DebugRenderer_Procs {
    pub DrawLine: ::std::option::Option<
        unsafe extern "C" fn(
            userData: *mut ::std::os::raw::c_void,
            from: *const JPH_RVec3,
            to: *const JPH_RVec3,
            color: JPH_Color,
        ),
    >,
    pub DrawTriangle: ::std::option::Option<
        unsafe extern "C" fn(
            userData: *mut ::std::os::raw::c_void,
            v1: *const JPH_RVec3,
            v2: *const JPH_RVec3,
            v3: *const JPH_RVec3,
            color: JPH_Color,
            castShadow: JPH_DebugRenderer_CastShadow,
        ),
    >,
    pub DrawText3D: ::std::option::Option<
        unsafe extern "C" fn(
            userData: *mut ::std::os::raw::c_void,
            position: *const JPH_RVec3,
            str_: *const ::std::os::raw::c_char,
            color: JPH_Color,
            height: f32,
        ),
    >,
}
#[test]
fn bindgen_test_layout_JPH_DebugRenderer_Procs() {
    const UNINIT: ::std::mem::MaybeUninit<JPH_DebugRenderer_Procs> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JPH_DebugRenderer_Procs>(),
        24usize,
        concat!("Size of: ", stringify!(JPH_DebugRenderer_Procs))
    );
    assert_eq!(
        ::std::mem::align_of::<JPH_DebugRenderer_Procs>(),
        8usize,
        concat!("Alignment of ", stringify!(JPH_DebugRenderer_Procs))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DrawLine) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_DebugRenderer_Procs),
            "::",
            stringify!(DrawLine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DrawTriangle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_DebugRenderer_Procs),
            "::",
            stringify!(DrawTriangle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DrawText3D) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(JPH_DebugRenderer_Procs),
            "::",
            stringify!(DrawText3D)
        )
    );
}
extern "C" {
    pub fn JPH_DebugRenderer_Create(
        procs: JPH_DebugRenderer_Procs,
        userData: *mut ::std::os::raw::c_void,
    ) -> *mut JPH_DebugRenderer;
}
extern "C" {
    pub fn JPH_DebugRenderer_Destroy(renderer: *mut JPH_DebugRenderer);
}
extern "C" {
    pub fn JPH_DebugRenderer_NextFrame(renderer: *mut JPH_DebugRenderer);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
